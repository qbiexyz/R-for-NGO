[["index.html", "R for NGO Chapter 1 前言_關於本講義 1.1 R語言 應用性: 高、難度: 中高 1.2 學習目標 1.3 參考資料 1.4 大綱(教材主題)", " R for NGO 台北大學社會所_吳永健 2023-05-24 Chapter 1 前言_關於本講義 這份講義是希望讓原本沒有程式與或統計基礎的人，能夠在短時間初步了解R語言的簡單概念和操作，以及能夠進行初步的資料讀取、清理、分析與視覺化。 由於是初步介紹的入門講義，因此會簡單介紹一下R的基礎概念，但部分過於涉及程式設計的部分會稍微略過，重點會放在如何獲取資料與簡單清理以及後續使用政府開放資料實作部分 目的是讓讀者能夠輕鬆並短時間知道使用資料的好處，因此在分析或實作上，也不會涉及到深入的統計或視覺化， 若是在看過這份講義後對進階分析有興趣者，可以到以下參考書籍或資源，進一步學習。 1.1 R語言 應用性: 高、難度: 中高 R的好處在於免費、靈活，且有許多額外的套件輔助分析，若想要做的分析一般的套件沒有支援時，可以自寫函數或程式來處理，另外在統計方法與視覺化上面都有很多應用，且網路上有很多自學資源以及論壇解答遇到的問題。 缺點在於學習坡度較高、需要學習程式語言，新的外裝套件並沒有通過學術檢證、沒有售後服務。 1.2 學習目標 初步認識R語言 初步知道R語言大概可以做到什麼 運用R語言讀取資料 運用R語言進行簡單資料清理 運用R語言進行簡單探索性分析與資料視覺化 1.3 參考資料 1.3.1 講義 本講義是擷取/修改下列講義部分內容，希望能透過更簡易的方式了解資料分析初步內容與過程，若因此對於資料分析有興趣，想嘗試更深入的資料分析， 建議深入查看以下講義中更完整的內容。 量化研究方法實作(課堂教材)，by 陳易甫 資料科學與R語言，by 曾意儒 Programming for Data Science (I)，by 林茂廷 輕鬆學習 R 語言，by 郭耀仁 R for Fledglings R for HR:An Introduction to Human Resource Analytics Using R R for Epidemiology R for Data Science R for Data Science (2e) 1.3.2 其他學習資源 其他進階R books 各種Cheatsheets Posit 網路上的各種筆記或論壇 chatgpt? 1.3.3 政府公開資料相關資源 以下列出台灣部分的政府公開資料，下面列出的只是一小部分，還有很多其他政府或非政府的Open data可以自行探索 政府資料開放平台 臺北市資料大平台 中華民國統計資訊網 教育部統計資料 衛服部統計資料 內政部警政署統計資料 PRIDE政策研究指標資料庫 政府各部會調查型資料 (需加入srda會員並根據用途申請) 除台灣外，世界各國也有各自的Open data，可以用關鍵字在google查找，另外也有網站整理世界各地約2600以上的開放資料庫，可以按照地圖去查找 參考: 資料分析人的福利：20個免費開放資料源 1.4 大綱(教材主題) 基礎篇_R的介面與R studio的介紹 什麼是R 和 Rstudio 下載R 和 Rstudio Rstudio介面與初步設定 安裝套件和help 錯誤訊息 基礎篇_R語言的基礎概念 指派與命名 基本運算 資料型態 資料結構 簡單條件判斷式 基礎篇_選取、新增、替換與刪除元素 選取 新增 替換 刪除 進階篇_資料讀取、匯出、合併與初步瀏覽 設定工作路徑 讀取資料 匯出檔案 簡單資料合併 初步瀏覽 進階篇_資料清理與整理 資料屬性查詢函數 資料排序 字串處理 遺漏值處理 dplyr(資處部分) 進階篇_簡單探索性分析與資料視覺化 summary…. ggplot2 應用篇_政府公開資料實際操作 "],["基礎篇_r-與r-studio的介紹.html", "Chapter 2 基礎篇_R 與R studio的介紹 2.1 什麼是R 和 Rstudio 2.2 下載R 和 Rstudio 2.3 Rstudio介面與初步設定 2.4 安裝套件和help 2.5 錯誤訊息", " Chapter 2 基礎篇_R 與R studio的介紹 2.1 什麼是R 和 Rstudio R是一套開放式的統計程式語言，主要用於資料分析與統計運算，使用者可以免費的下載並安裝在任何的作業系統上。 R studio是一套提供R整合開發環境的軟體(Integrated Development Environment; IDE）。 2.2 下載R 和 Rstudio 先裝R，再裝R studio Install R: Windows: https://cran.r-project.org/bin/windows/base/ Mac: https://cran.r-project.org/bin/macosx/ Install RStudio Desktop: https://www.rstudio.com/products/rstudio/download/#download 2.3 Rstudio介面與初步設定 2.3.1 Rstudio介面 2.3.2 Rstudio初步設定 Tools &gt; Global Options Code: Display tab下勾選Show whitespace characters。 Appearance: 可改變RStudio Theme. 2.3.3 新建R Script R Script(.R file)是純粹執行R的語法 另外還有R Markdown or R Notebook (.Rmd file)，是用markdown方式呈現將文字、程式、表格與圖都編輯在同一份文件之中(在此不多做介紹) 2.3.4 新建R project 若想要執行的是一個計劃或同一個工作，可能會想將檔案或資料集中在同一個地方，這時可以新建一個New Project的資料夾，將東西統一存放 New Project -&gt; New Directory -&gt; New Project -&gt; 設定Project Name 和放檔案的路徑與資料夾 2.3.5 小技巧 可以在上述地方察看快捷鍵的指令， 也有一些常用的快捷鍵整理提供參考 另外比較重要的是R的註解標籤是# 2.4 安裝套件和help 安裝套件：安裝只需要做一次，就是將你要的套件從網路上抓下來並安裝到你的電腦裡 載入套件：確定要用的套件已經在電腦中後，在使用前，需要將該套件載入至R才能夠使用 例如， 我們想要裝haven這個套件。 等R跑完安裝後，就可將這個套件載入。必須載入後才能夠使用這個套件 這個套件可以讓我們將SPSS, SAS, STATA等資料檔讀入R之中。 至於詳細的用法，我們可以用「help」來看這個套件的語法該如何設定 #安裝套件： install.packages(&quot;haven&quot;) #載入套件： library(haven) #or require(haven) #查詢套件/函數用法 help(haven) # 查詢套件 help(read_dta) # 查詢函數 #or ?haven ?read_dta #or 在想查詢的套件/函數上面按F1 2.4.1 安裝講義所用套件 writexl 2.5 錯誤訊息 在按鍵或執行程式時可能會遇到一些錯誤訊息， 常見的錯誤訊息如下: Message：有可能的錯誤通知，程式會繼續執行 Warning：有錯誤，但是不會影響太多，程式會繼續執行 Error：有錯，而且無法繼續執行程式 Condition：可能會發生的情況 "],["基礎篇_r語言的基礎概念.html", "Chapter 3 基礎篇_R語言的基礎概念 3.1 指派與命名 3.2 基本運算 3.3 資料型態 3.4 資料結構 3.5 查詢資料型態或結構 3.6 簡單條件判斷式", " Chapter 3 基礎篇_R語言的基礎概念 3.1 指派與命名 指派（assignment）：將資料儲存至一個代號（變項）內。 可以用”&lt;-” 或”=“。但使用”&lt;-“好過”=“ 「&lt;-」的 Windows快捷鍵: 「Alt+-」 # 將24存在「a」這個代號當中 a &lt;- 24 a = 24 # 將a-10存在「b」這個代號當中(a 需要先被指派) b &lt;- a-10 ## or a - 10 -&gt; b # 若a已經代表24，那麼b就會等於24-10=14 b 若有指派a，則旁邊Environment -&gt; Global Environment -&gt; Values 就會出現a 有效的命名 以字母(大小寫都可)、數字、逗點(.)、下底線(_)開頭 若以.點開頭，後面不能接數字 常見命名規則 以英文字母開頭(常見多以小寫字母開頭) #常見命名 incomeLevel &lt;- c(&quot;low&quot;, &quot;middle&quot;, &quot;high&quot;) income_level &lt;- c(&quot;low&quot;, &quot;middle&quot;, &quot;high&quot;) 3.2 基本運算 3.2.1 數學基本運算 num1 &lt;- 1 num2 &lt;- 10 # 加 + num1+num2 ## 1+10 = 11 # 減 - num1-num2 ## 1-10 = -9 # 乘 * num1*num2 ## 1*10 = 10 # 除 / num1/num2 ## 1/10 = 0.1 # 餘數 %% 10%%3 ## 10除以3後所得餘數 # 次方 ^ 10^2 ## 10的2次方 = 100 3.2.2 邏輯運算 num1 &lt;- 1 num2 &lt;- 10 # 大於 &gt; num1 &gt; num2 ## num1是否大於num2 -&gt; FALSE # 小於 &lt; num1 &lt; num2 ## num1是否小於num2 -&gt; TRUE # 等於 ==，為了不與變數設定混淆，判斷兩變數是否相等，要用雙等號 num1 == num2 ## num1是否等於num2 -&gt; FALSE # 大於等於 &gt;= num1 &gt;= num2 ## num1是否大於等於num2 -&gt; FALSE # 小於等於 &lt;= num1 &lt;= num2 ## num1是否小於等於num2 -&gt; TRUE # 且 &amp; TRUE &amp; TRUE ## TRUE TRUE &amp; FALSE ## FALSE # 或 | TRUE | TRUE ## TRUE TRUE | FALSE ## TRUE # 反向布林變數! !TRUE ## 不等於TRUE 所以是 FALSE 3.3 資料型態 3.3.1 數字(numeric): 數值包括整數integer（沒有小數點）與浮點數double（有小數點）的數值 5L # integer 3.14 # double 3 # double 3.3.2 字串(character): 用雙引號”框起的文字會被儲存為字串格式，若在數字前後加上雙引號，數字也會被儲存為文字形式，無法進行數值的加減乘除等運算。 &quot;Apple&quot; &#39;Friday&#39; 3.3.3 邏輯(logical): TRUE FALSE T F 3.3.4 日期(date): 使用 lubridate 套件可更好呈現 library(lubridate) ymd(&#39;2012/3/3&#39;) 3.4 資料結構 3.4.1 向量(vectors): 單維的資料，單一類型 concatenate(堆疊): 以c(…)將「相同類型」值以「逗點」分隔而形成的向量 # 同樣是數字 c(1, 2 ,3) c(c(1, 2), c(3, 4)) ## 等於c(1, 2, 3, 4) # 同樣是文字 c(&quot;apple&quot;, &quot;banana&quot;) # 若文字中混數字會被自動當作文字 c(&quot;apple&quot;, &quot;banana&quot;, 5) ## 等於c(&quot;apple, banana&quot;, &quot;5&quot;) 3.4.2 因子(factor): 因子是由向量轉換而成，多用於表示「類別數據｣ 例如有三種收入等級的類別，分別是低收入、中等收入、高收入， 使用方法為factor(資料向量,levels=類別次序)，levels參數可設定各類別的次序 # 原本是文字資料，設定類別 fac_1 &lt;- factor(c(&quot;低收入&quot;, &quot;中等收入&quot;, &quot;高收入&quot;, &quot;低收入&quot;), levels = c(&quot;低收入&quot;, &quot;中等收入&quot;, &quot;高收入&quot;)) table(fac_1) ##查看次數分配 # 原本是數字資料，設定類別 fac_2 &lt;- factor(c(1, 2, 3, 1, 3), levels = c(1, 2, 3), labels = c(&quot;低收入&quot;, &quot;中等收入&quot;, &quot;高收入&quot;)) table(fac_2) ##查看次數分配 # 若是資料多了一個4沒有被設定類別 -&gt; 被當成缺失值 fac_3 &lt;- factor(c(1, 2, 3, 1, 3, 4), levels = c(1, 2, 3), labels = c(&quot;低收入&quot;, &quot;中等收入&quot;, &quot;高收入&quot;)) table(fac_3) ##查看次數分配 3.4.3 清單(list): 可以包含向量、矩陣、不同的清單，可以包含「不同的資料類型」。 通常統計跑完後，結果會儲存在清單之中 num_list &lt;- c(3, 4, 5) char_list &lt;- c(&quot;a&quot;, &quot;b&quot;) logic_list &lt;- c(TRUE, TRUE, FALSE) out_list_1 &lt;- list(num_list, char_list, logic_list, 3) ## or out_list_3 &lt;- list( c(3, 4, 5), c(&quot;a&quot;, &quot;b&quot;), c(TRUE, TRUE, FALSE), 3 ) ## or 給予名稱 out_list_2 &lt;- list( num_list = c(3, 4, 5), char_list = c(&quot;a&quot;, &quot;b&quot;), logic_list = c(TRUE, TRUE, FALSE), 3 ) 3.4.4 矩陣(matrices): 二維的資料，單一類型 mat_1 &lt;- matrix(1:4, nrow = 2, ncol = 2) mat_2 &lt;- matrix(1:9, nrow = 3, ncol = 3) 3.4.5 陣列(array): 多維度的資料，單一類型 vec_1 &lt;- c(1, 2, 4) vec_2 &lt;- c(15, 17, 27, 3, 10, 11) output &lt;- array(c(vec_1, vec_2), dim = c(3, 3, 2)) 3.4.6 資料架構(data frame)： 像是我們用的套裝統計軟體（如excel, spss, stata）中資料儲存的方式。 每一欄（Column）儲存不同的資料、每一列（Row）代表不同的觀察值 num_list &lt;- c(3, 4, 5) char_list &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) logic_list &lt;- c(TRUE, FALSE, TRUE) # 使用data.frame()來創建新的資料框 data_frame &lt;- data.frame(num_list, char_list, logic_list) # 或是將list 轉成data.frame data_list &lt;- list( num_list, char_list, logic_list ) data_list &lt;- as.data.frame(data_list) 3.5 查詢資料型態或結構 Type: 是查看電腦如何儲存資料，物件的基本型態 Class: 是查看物件的類別(螢幕顯示的型態)，及能對它進行的操作所做的分類 # type typeof(c(&quot;John&quot;, &quot;Mary&quot;)) typeof(c(2, 3.1412)) typeof(c(TRUE, TRUE, F)) # class class(c(&quot;John&quot;, &quot;Mary&quot;)) class(c(2, 3.1412)) class(c(TRUE, TRUE, F)) 3.6 簡單條件判斷式 3.6.1 if-else敘述 邏輯判斷: if-else敘述 若if後所接邏輯判斷為真(TRUE)，就會執行if下方之程式碼，若為偽(FALSE)，則執行else下方之程式碼，若程式中沒有else片段，則不執行任何程式碼。 #舉例來說，若考試分數大於等於60分，則印出及格字樣， #小於60分則印出不及格字樣，程式範例如下 score &lt;- 59 if(score &gt;= 60){ print(&quot;及格&quot;) } if(score &gt;= 60){ print(&quot;及格&quot;) }else{ print(&quot;不及格&quot;) } 多重邏輯判斷: if-else if-else score &lt;- 95 if(score &gt;= 90){ print(&quot;優秀&quot;) }else if(score &gt;= 60){ print(&quot;及格&quot;) }else{ print(&quot;不及格&quot;) } 邏輯判斷簡化: ifelse ifelse()函數可用最短的方式取代if-else敘述， 使用方法為ifelse(邏輯判斷,判斷為真要執行的程式碼,判斷為偽要執行的程式碼) score &lt;- 80 ifelse(score &gt;= 60, &quot;及格&quot;, &quot;不及格&quot;) ifelse(score &gt;= 90, &quot;優秀&quot;, ifelse(score &gt;= 60, &quot;及格&quot;, &quot;不及格&quot;)) "],["基礎篇_選取新增替換與刪除元素.html", "Chapter 4 基礎篇_選取、新增、替換與刪除元素 4.1 選取 4.2 新增 4.3 替換 4.4 刪除", " Chapter 4 基礎篇_選取、新增、替換與刪除元素 4.1 選取 4.1.1 取出vector中的元素 vector_choose &lt;- c(&quot;apple&quot;,&quot;banana&quot;,&quot;cat&quot;) # 有多少位置可選(該元素的長度)： length(vector_choose) # 取出apple vector_choose[[1]] head(vector_choose, 1) ##取出vector_choose向量的前n個元素 # 取出banana和cat vector_choose[c(2, 3)] vector_choose[c(2:3)] tail(vector_choose, 2) ##取出vector_choose向量的後n個元素 4.1.2 取出list中的元素 weather &lt;- list( today = list( list(&quot;台北市&quot;, c(highest_temp = 25)), list(&quot;新北市&quot;, c(highest_temp = 24)) ), tomorrow = list( list(&quot;台北市&quot;, c(highest_temp = 30)), list(&quot;新北市&quot;, c(highest_temp = 28)) ) ) # 查看整個list的架構或如下圖方式點選 print(weather) 若想較簡易得知list中元素位置，可以直接點選(如下圖) # 取出today當中的台北市 (若有名稱時[[&quot;&quot;]] 和$ 可以相互使用) weather[[&quot;today&quot;]][[1]][[1]] ## or weather$today[[1]][[1]] #比較[[]] 和 [] 差別 taipei1 &lt;- weather$today[[1]][[1]] taipei2 &lt;- weather$today[[1]][1] taipei1 taipei2 上述可以看到選取資料時有[[]] 和 []兩種，差別在於: [[]]: 拿出某個物件值。weather$today[[1]][[1][[1]]將weather中today裡的台北市物件值拿出來，因此只留下單純的值。 []: 留下某個物件值。weather$today[[1]][[1][1]只留下weather中today裡的台北市，因此原先資料結構和名稱仍會留下。 如下圖taipei2還是list的結構，但taipei1是單純的Value。 # 取出tomorrow當中新北市的highest_temp值(25) 並保留highest_temp的名稱 weather$tomorrow[[2]][[2]] weather$tomorrow[[2]][[2]][1] # 取出tomorrow當中新北市的highest_temp值(25) 並捨棄highest_temp的名稱 weather[[&quot;tomorrow&quot;]][[2]][[2]][[&quot;highest_temp&quot;]] ## or weather$tomorrow[[2]][[2]][[1]] 4.1.3 取出data.frame中的元素 #取得R內建資料 data(iris) # 查看欄位名稱 names(iris) #想取出第一列(row)第二行/欄(column)的數值 (直行橫列) iris[1, 2] # [row, column] #想取出第一、三行的資料 iris_c1_1 &lt;- iris[, c(1, 3)] ## or iris_c1_2 &lt;- iris[, c(&quot;Sepal.Length&quot;, &quot;Petal.Length&quot;)] # 用欄位名稱選取 ## or c13 &lt;-c (&quot;Sepal.Length&quot;, &quot;Petal.Length&quot;) iris_c1_3 &lt;- iris[, c13] ## or iris_c1_4 &lt;- iris[, c(T, F, T, F, F)] # 用布林變數選取 # 若只想取出一行，除了上述方法也可以用「$」選取 iris_c1_5 &lt;- iris$Sepal.Length # 用欄位名稱選取 4.2 新增 若要新增元素、首先我們必須知道元素的位置，也就是上一章節詳細介紹元素的部分， 1. 找出不存在的位置 2. 給予這個不存在位置一個值 例如，若想將範例vector_choose中新增一個\"4\": vector_choose &lt;- c(&quot;apple&quot;,&quot;banana&quot;,&quot;cat&quot;) vector_choose # 1.找出不存在的位置 ## vector_choose 只有三個元素、因此第四個位置的元素是不存在的 vector_choose[[3]] # 存在&quot;cat&quot; vector_choose[[4]] # 不存在元素(會出現Error) # 2. 給予這個不存在位置一個值 ## 因此若想在vector_choose加上第四個元素&quot;4&quot;， ## 需要將&quot;dog&quot; 指派到vector_choose 的第四個位置 vector_choose[[4]] &lt;- &quot;4&quot; vector_choose # 也可以新增多個元素 vector_choose &lt;- c(&quot;apple&quot;,&quot;banana&quot;,&quot;cat&quot;) vector_choose[4:6] &lt;- c(&quot;4&quot;, &quot;5&quot;, &quot;6&quot;) vector_choose ## or vector_choose &lt;- c(&quot;apple&quot;,&quot;banana&quot;,&quot;cat&quot;) vector_choose[c(4, 6 , 7)] &lt;- c(&quot;4&quot;, &quot;6&quot;, &quot;7&quot;) # 此時第5個位置會變成NA vector_choose 其他list或data.frame的新增也是類似相同概念 4.3 替換 若要替換元素、首先我們還是必須先知道要替換元素的位置， 1. 找出需要替換元素的位置 2. 給予這個需要替換元素的位置另一個值 例如，若想將範例vector_choose中原先的\"banana\"，替換成\"2\": vector_choose &lt;- c(&quot;apple&quot;,&quot;banana&quot;,&quot;cat&quot;) vector_choose # 1.找出需要替換元素的位置 ## vector_choose &quot;banana&quot;是在第二個位置 vector_choose[[2]] # 存在&quot;banana&quot; # 2. 給予這個需要替換元素的位置另一個值 ## 因此若想在vector_choose加上第四個元素&quot;4&quot;， ## 需要將&quot;dog&quot; 指派到vector_choose 的第四個位置 vector_choose[[2]] &lt;- &quot;2&quot; vector_choose # 也可以替換多個元素 vector_choose &lt;- c(&quot;apple&quot;,&quot;banana&quot;,&quot;cat&quot;) vector_choose[1:2] &lt;- c(&quot;1&quot;, &quot;2&quot;) # 此時&quot;apple&quot;和&quot;banana&quot;會變成&quot;1&quot;、&quot;2&quot; vector_choose ## or vector_choose &lt;- c(&quot;apple&quot;,&quot;banana&quot;,&quot;cat&quot;) vector_choose[c(1, 3)] &lt;- c(&quot;1&quot;, &quot;3&quot;) # 此時&quot;apple&quot;和&quot;cat&quot;會變成&quot;1&quot;、&quot;3&quot; vector_choose #也可以同時新增和替換元素 vector_choose &lt;- c(&quot;apple&quot;,&quot;banana&quot;,&quot;cat&quot;) vector_choose[c(1, 3, 4)] &lt;- c(&quot;1&quot;, &quot;3&quot;, &quot;4&quot;) vector_choose 其他list或data.frame的替換也是類似相同概念 4.4 刪除 若要刪除元素有兩種方式， 同樣先找出需要刪除元素的位置 第一種: 取出需要的元素，再回存自己(沒有取出的，即是刪去) 第二種: 取出不需要的元素，用-回存自己(回存-即是刪去)(只能用在vector) 例如，若想將範例vector_choose中原先的\"apple\"和\"cat\"刪除: vector_choose &lt;- c(&quot;apple&quot;,&quot;banana&quot;,&quot;cat&quot;) vector_choose # 1.找出需要刪除元素的位置 vector_choose[c(1, 3)] # 2. 取出需要的元素(&quot;banana&quot;)再回存自己(沒有取出的，即是刪去) vector_choose &lt;- vector_choose[[2]] vector_choose ## or 取出不需要的元素(&quot;apple&quot;、&quot;cat&quot;) vector_choose &lt;- vector_choose[-c(1, 3)] vector_choose 另外list的形式是用NULL來刪除， 類似替換的概念，但替換成NULL(空的) 例如，若想將範例weather中原先的\"台北市\"刪除: weather &lt;- list( today = list( &quot;台北市&quot;, c(highest_temp = 25) ) ) weather #&quot;台北市&quot;的位置 weather$today[[1]] #替換成NULL(刪除) weather$today[[1]] &lt;- NULL weather "],["進階篇_資料讀取匯出合併與初步瀏覽.html", "Chapter 5 進階篇_資料讀取、匯出、合併與初步瀏覽 5.1 設定工作路徑 5.2 讀取資料 5.3 匯出檔案 5.4 簡單資料合併 5.5 初步瀏覽", " Chapter 5 進階篇_資料讀取、匯出、合併與初步瀏覽 5.1 設定工作路徑 首先可以先設定放檔案路徑，比較需要注意的是在路徑上平常多是使用\\， 但在R中需要使用/ 這樣之後讀取或匯出資料就只需要寫檔案名稱，不用加上前面路徑，會直接存在設定路徑的資料夾中，若檔案需要放在另外位置，也只須在檔名前面加上需要存取的位置 可以對需要存放的資料夾按 右鍵-&gt;內容-&gt;位置或是右鍵-&gt;複製路徑 查看資料夾的路徑 若是使用R Project打開，除非需要更換路徑，不然預設就是R Project的資料夾 #設定工作路徑 setwd(&quot;D:/Dropbox/R_for_NGO&quot;) 5.2 讀取資料 開放資料(英語：Open data)指的是一種經過挑選與許可的資料。這種資料不受著作權、專利權，以及其他管理機制所限制，可以開放給社會公眾，任何人都可以自由出版使用，不論是要拿來出版或是做其他的運用都不加以限制。 Open data 運動希望達成的目標與開放原始碼、內容開放、開放獲取等其他「開放」運動類似。Open data 背後的核心思想由來已久(例如在 Mertonian tradition of science)，但 Open data 這名詞直到近代才出現，拜網際網路崛起而為人所知，尤其是 Data.gov 等 Open data 政府組織的設立。 (維基百科) 常見的Open Data儲存方式包括表格式檔案（包含 CSV 資料、Excel 試算表）、非表格式檔案（包含 TXT 資料、JSON 資料、XML資料）， 但大多數的公開資料都可以直接下載CSV檔案，因此在此先介紹這個較簡單的方式， 另外其他透過網路爬蟲、API或JSON與XML格式的資料，暫不多做介紹，有興趣者可以到以下連結查看參考1、參考2、參考3 5.2.1 Import Dataset功能 (RStudio) 若是檔案為可直接下載(通常來說，多數公開資料都有提供直接下載的.CVS檔案格式)，包括文字檔、其他軟體的檔案格式， 在RStudio當中有提供直接點選讀取資料的功能，包括純文字.txt、.cvs、或Excel試算表.xslx、spss、SAS、Stata的檔案格式 下圖以讀取.cvs檔案為範例， 1. 點選Import Dataset -&gt; From Text(readr)... 2. 出現視窗後點選左上角Browse，點選要輸入的檔案 3. 之後空白處會載入部分資料提供預覽，可以根據需求更改參數(左下角) 4. 右下角也有提供程式碼，且就是根據你點選的方式呈現，可以點選完後複製程式碼(右下有個類似紙的圖案)，這樣就可以留下讀檔案的紀錄 5.3 匯出檔案 在R處理完檔案後，通常會將檔案匯出成其他另外檔案提供其他人使用，較常匯出使用的檔案格式tab分隔的文字檔.txt或是逗號分隔的文字檔.csv，有一些格式上的呈現可以另外再進行參數設定，這邊只會介紹簡單的匯出形式，若要調整可參考該函數的help文件 5.3.1 R物件.rds 若是處理到一半，之後還要繼續用R處理，可以先匯出成R物件檔案.rds，較方便自己下次處理，後續最後處理完成再轉換成其他常見檔案 #取得R內建資料 data(iris) saveRDS(iris,&quot;iris.rds&quot;) ## 前面是data名稱、後面是要存的檔案名稱 5.3.2 文字檔.txt #查詢write.table的help文件 ?write.table #取得R內建資料 data(iris) #匯出成.txt檔案 write.table(iris, file = &quot;iris.txt&quot;, sep = &quot;,&quot;, row.names = F, col.names = T) write.table的help文件，文件後面也有針對每個參數的描述 5.3.3 CSV檔.csv #查詢write.csv的help文件 ?write.csv #取得R內建資料 data(iris) write.csv(iris,file=&quot;iris.csv&quot;,row.names = F) 5.3.4 Excel 試算表.xslx 存成.xlsx需另外使用其他套件，在此使用的是writexl，但也有其他的套件也可以輸出成.xlsx(如openxlsx) #載入writexl套件 library(writexl) #查詢write_xlsx的help文件 ?write_xlsx #取得R內建資料 data(iris) write_xlsx(list(iris = iris), &quot;iris.xlsx&quot;) 5.4 簡單資料合併 在資料當中有時需要新增整列或整行的資料， 可以使用rbind()和cbind()來完成(vector或是data.frame都適用) 若今天想在iris資料中加入新的一列(原先有150筆資料新增一筆) # vector rbind(c(1, 2, 3), #第一列 c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) #第二列 ) # 取得R內建資料 data(iris) names(iris) # 新增成另一個資料 iris_nrow &lt;- rbind(iris, #資料框 c(1, 2, 3, 4, &quot;setosa&quot;) ## 新增一列 ) ## or # 直接更換原先的資料 iris &lt;- rbind(iris, #資料框 c(1, 2, 3, 4, &quot;setosa&quot;) ## 新增一列 ) 若今天想在iris資料中加入新的一行(原先有四行) # vector cbind(c(1, 2, 3), #第一行 c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) #第二行 ) #取得R內建資料 data(iris) names(iris) # 新增成另一個資料 iris_newcol &lt;- cbind(iris, ## 資料框 rep(&quot;newcol&quot;, nrow(iris)) ## 自行新增一行、或是有對應的資料可以直接新增 ) 5.4.1 其他資料轉換 5.4.1.1 dplyr套件提供更有效率的資料結合方法 在資料想以某個欄位為依據進行合併時(像是長期資料，想以個人id將兩波資料合併)， 可以使用R原先內建的merge或是用dplyr套件提供的相關指令 詳細可以查看參考1、參考2的整理 # 增加變數：使用R base的merge merge(data_frame1, data_frame2, by=&quot;idvar&quot;, all=TRUE) # 增加觀察值：使用dplyr的bind_rows() bind_rows(data_frame1, data_frame2) 5.4.1.2 長寬資料轉換 在處理特殊資料或是一些特殊統計分析時，可能需要將資料做長寬轉換處理，tidyr套件中提供的兩個好用的函數pivot_longer()、pivot_wider()， 在此並不多作介紹，有興趣可以查看參考1、參考2 5.5 初步瀏覽 5.5.1 資料屬性查詢函數 若已經將資料讀取到R裡面，一開始當然是要看一下或檢查資料的大致狀況如何 以內建資料iris為例: data(iris) View(iris) str(iris) 5.5.2 資料排序、篩選 data(iris) names(iris) head(iris) head(sort(iris$Sepal.Length)) head(order(iris$Sepal.Length)) "],["進階篇_資料清理與整理.html", "Chapter 6 進階篇_資料清理與整理 6.1 遺漏值處理 6.2 字串處理 6.3 dplyr", " Chapter 6 進階篇_資料清理與整理 6.0.1 轉換資料型態或結構 使用as.targetClass將值轉換為targetClass類。 as.numeric()將值轉換為數字類 as.character()將值轉換為字符類 其他轉換…… num_t1 &lt;- c(0.1, 2 , 4) char_t1 &lt;- c(&quot;0.1&quot;, &quot;2&quot;, &quot;4&quot;) as.character(num_t1) as.numeric(char_t1) 6.1 遺漏值處理 6.2 字串處理 6.3 dplyr 1.查看資料 2.資料型態轉換 3.資處 4.新建變項 5. "],["進階篇_初步統計與資料視覺化.html", "Chapter 7 進階篇_初步統計與資料視覺化", " Chapter 7 進階篇_初步統計與資料視覺化 本章節將介紹學習R語言的 data.table "],["應用篇_政府公開資料實際操作.html", "Chapter 8 應用篇_政府公開資料實際操作", " Chapter 8 應用篇_政府公開資料實際操作 本章節將介紹學習R語言的 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
