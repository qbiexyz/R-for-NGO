[["index.html", "R for NGO Chapter 1 前言_關於本講義 1.1 R語言 應用性: 高、難度: 中高 1.2 學習目標 1.3 參考資料 1.4 資料 1.5 大綱(教材主題)", " R for NGO 台北大學社會所_吳永健 2023-06-13 Chapter 1 前言_關於本講義 講義的資料若有錯誤，再麻煩寄信告知修改 email: qbieqbiexyz@gmail.com 這份講義是希望讓原本沒有程式與或統計基礎的人，能夠在短時間初步了解R語言的簡單概念和操作，以及能夠進行初步的資料讀取、清理、分析與視覺化。 由於是初步介紹的入門講義，因此會簡單介紹一下R的基礎概念，但部分過於涉及程式設計的部分會稍微略過，重點會放在如何獲取資料與簡單清理以及後續使用資料實作初步統計與視覺化部分 目的是讓讀者能夠輕鬆並短時間知道使用資料的好處，因此在分析或實作上，也不會涉及到深入的統計或視覺化， 若是在看過這份講義後對進階分析有興趣者，可以到以下所列參考書籍或資源，進一步學習。 1.1 R語言 應用性: 高、難度: 中高 R的好處在於免費、靈活，且有許多額外的套件輔助分析，若想要做的分析一般的套件沒有支援時，可以自寫函數或程式來處理，另外在統計方法與視覺化上面都有很多應用，且網路上有很多自學資源以及論壇解答遇到的問題。 缺點在於學習坡度較高、需要學習程式語言，新的外裝套件並沒有通過學術檢證、沒有售後服務。 1.2 學習目標 初步認識R語言與R語言基礎概念 運用R語言讀取、整理資料 運用R語言進行簡單資料清理 運用R語言進行簡單探索性分析與資料視覺化 1.3 參考資料 1.3.1 講義 本講義是擷取/修改下列講義部分內容，希望能透過更簡易的方式了解資料分析初步內容與過程，若因此對於資料分析有興趣，想嘗試更進階/深入的資料分析， 建議深入查看以下講義中更完整的內容。 R for Data Science R for Data Science (2e) 量化研究方法實作(課堂教材)，by 陳易甫 資料科學與R語言，by 曾意儒 Programming for Data Science (I)，by 林茂廷 輕鬆學習 R 語言，by 郭耀仁 R语言教程 R for Fledglings R for HR:An Introduction to Human Resource Analytics Using R R for Epidemiology R Package Showcase tidyverse 1.3.2 其他學習資源 其他進階R books 各種Cheatsheets base R cheat-sheet RPubs Posit 網路上的各種筆記或論壇 chatgpt? 1.4 資料 開放資料(英語：Open data)指的是一種經過挑選與許可的資料。這種資料不受著作權、專利權，以及其他管理機制所限制，可以開放給社會公眾，任何人都可以自由出版使用，不論是要拿來出版或是做其他的運用都不加以限制。 1.4.1 政府公開資料相關資源 以下列出台灣部分的政府公開資料，下面列出的只是一小部分，還有很多其他政府或非政府的Open data可以自行探索 政府資料開放平台 臺北市資料大平台 社會經濟資料服務平台 中華民國統計資訊網 教育部統計資料 衛服部統計資料 內政部警政署統計資料 PRIDE政策研究指標資料庫 除台灣外，世界各國也有各自的Open data，可以用關鍵字自行查找，另外也有網站整理世界各地約2600以上的開放資料庫，可以按照地圖去查找 參考: 資料分析人的福利：20個免費開放資料源 1.4.2 公開調查資料 另外也有一些「調查資料」可以免費提供申請下載使用，調查資料可能不像Open data一樣可以隨意使用，但多數公開的調查資料經申請後即可下載使用， 在台灣多數有公開的調查資料會被整理在「SRDA學術調查資料庫」當中，其中也包括政府每年的調查型資料，兩者都可以提供申請下載使用，但也需注意相關的參考格式/ 若需要下載資料需要先加入會員，一般而言若不具有學術身分，也可以加入網路會員/ 在youtube上也有SRDA頻道與一系列使用教學，若有需要可自行觀看 調查型資料的資源也非常豐富，SRDA也只是整理出部份台灣的調查資料，另外一些可能是放在該調查官網需自行下載，或是跨國型資料、國外的調查資料，有些可能須申請，有些是公開的，大多數都有問卷可以先查看是否有想要分析的題目再決定是否使用該資料，若有需要可以依需求自行搜索並下載 1.4.3 講義使用資料 講義後續範例會使用世界價值觀第七波的台灣調查，資料可在SRDA上下載取得，或是在此連結下載使用 參考:蔡明璋、陳志柔(2023)。物質主義、後物質主義與新政治：世界價值觀第七波的台灣調查與亞洲國家的比較(C00344)【原始數據】取自中央研究院人文社會科學研究中心調查研究專題中心學術調查研究資料庫。https://doi.org/10.6141/TW-SRDA-C00344-1 1.5 大綱(教材主題) 基礎篇_R的介面與R studio的介紹 什麼是R 和 Rstudio 下載R 和 Rstudio Rstudio介面與初步設定 安裝套件和help 錯誤訊息 基礎篇_R語言的基礎概念 物件基礎操作 基本運算 資料型態 資料結構 簡單條件判斷式 管道控制pipe 基礎篇_元素的基礎操作 選取 新增 替換 刪除 判斷位置 命名 應用篇_資料讀取、匯出、合併與瀏覽 設定工作路徑 讀取資料 匯出資料 簡單資料合併 資料瀏覽 應用篇_實作簡單資料處理 前置準備 資料檢誤 設定不合理值 新建/修改/轉換變項 遺漏值處理 其他處理 匯出資料 應用篇_探索性資料分析 資料視覺化簡略介紹 ggplot2 簡單呈現探索式資料分析 "],["基礎篇_r-與r-studio的介紹.html", "Chapter 2 基礎篇_R 與R studio的介紹 2.1 什麼是R 和 Rstudio 2.2 下載R 和 Rstudio 2.3 Rstudio介面與初步設定 2.4 安裝套件和help 2.5 錯誤訊息", " Chapter 2 基礎篇_R 與R studio的介紹 2.1 什麼是R 和 Rstudio R是一套開放式的統計程式語言，主要用於資料分析與統計運算，使用者可以免費的下載並安裝在任何的作業系統上。 R studio是一套提供R整合開發環境的軟體(Integrated Development Environment; IDE）。 2.2 下載R 和 Rstudio 先裝R，再裝R studio Install R: Windows: https://cran.r-project.org/bin/windows/base/ Mac: https://cran.r-project.org/bin/macosx/ Install RStudio Desktop: https://www.rstudio.com/products/rstudio/download/#download 2.3 Rstudio介面與初步設定 2.3.1 Rstudio介面 2.3.2 Rstudio初步設定 Tools &gt; Global Options Code: Display tab下勾選Show whitespace characters。 Appearance: 可改變RStudio Theme. 2.3.3 新建R Script R Script(.R file)是純粹執行R的語法 另外還有R Markdown or R Notebook (.Rmd file)，是用markdown方式呈現將文字、程式、表格與圖都編輯在同一份文件之中(在此不多做介紹) 2.3.4 新建R project 若想要執行的是一個計劃或同一個工作，可能會想將檔案或資料集中在同一個地方，這時可以新建一個New Project的資料夾，將東西統一存放 New Project -&gt; New Directory -&gt; New Project -&gt; 設定Project Name 和放檔案的路徑與資料夾 2.3.5 小技巧 可以在上述地方察看快捷鍵的指令， 也有一些常用的快捷鍵整理提供參考 另外比較重要的是R的註解標籤是# 2.4 安裝套件和help 安裝套件：安裝只需要做一次，就是將你要的套件從網路上抓下來並安裝到你的電腦裡 載入套件：確定要用的套件已經在電腦中後，在使用前，需要將該套件載入至R才能夠使用 例如， 我們想要裝haven這個套件。 等R跑完安裝後，就可將這個套件載入。必須載入後才能夠使用這個套件 這個套件可以讓我們將SPSS, SAS, STATA等資料檔讀入R之中。 至於詳細的用法，我們可以用「help」來看這個套件的語法該如何設定 # 安裝套件： install.packages(&quot;haven&quot;) # 載入套件： library(haven) ## or require(haven) # 查詢套件/函數用法 help(haven) ## 查詢套件 help(read_dta) ## 查詢函數 ## or ?haven ?read_dta ## or 在想查詢的套件/函數上面按F1 2.4.1 安裝講義所用套件 # 接下來會用到的套件 pkgs &lt;- c(&quot;haven&quot;, &quot;lubridate&quot;, &quot;magrittr&quot;, &quot;readr&quot;, &quot;writexl&quot;, &quot;dplyr&quot;, &quot;tidyverse&quot;, &quot;data.table&quot;, &quot;DescTools&quot;, &quot;sjmisc&quot;, &quot;sjlabelled&quot;, &quot;validate&quot;, &quot;skimr&quot;) # 一次安裝套件： install.packages(&quot;pkgs&quot;) 2.5 錯誤訊息 在按鍵或執行程式時可能會遇到一些錯誤訊息， 常見的錯誤訊息如下(參考): Message：有可能的錯誤通知，程式會繼續執行 Warning：有錯誤，但是不會影響太多，程式會繼續執行 Error：有錯，而且無法繼續執行程式 Condition：可能會發生的情況 "],["基礎篇_r語言的基礎概念.html", "Chapter 3 基礎篇_R語言的基礎概念 3.1 物件基礎操作 3.2 基本運算 3.3 資料型態 3.4 資料結構 3.5 簡單條件判斷式 3.6 管道控制pipe", " Chapter 3 基礎篇_R語言的基礎概念 3.1 物件基礎操作 3.1.1 指派（assignment）： 將資料儲存至一個代號（變項）內， 可以用”&lt;-” 或”=“。但使用”&lt;-“好過”=“(另外也可以換個方向指派”-&gt;“，但較少使用) 「&lt;-」的 Windows快捷鍵: 「Alt+-」 # 將24存在「a」這個代號當中 a &lt;- 24 a = 24 24 -&gt; a # 用print()函數將物件內容輸出 print(a) ## or 直接打物件名稱 a # 用rm()函數移除物件 rm(a) # 將a-10存在「b」這個代號當中(a 需要先被指派) b &lt;- a-10 ## or a-10 -&gt; b # 若a已經代表24，那麼b就會等於24-10=14 b 若有指派a，則旁邊Environment -&gt; Global Environment -&gt; Values 就會出現a 3.1.2 命名 有效的命名 以字母(大小寫都可)、數字、逗點(.)、下底線(_)開頭 若以.點開頭，後面不能接數字 常見命名規則 以英文字母開頭(常見多以小寫字母開頭) # 常見命名 incomeLevel &lt;- c(&quot;low&quot;, &quot;middle&quot;, &quot;high&quot;) income_level &lt;- c(&quot;low&quot;, &quot;middle&quot;, &quot;high&quot;) 3.2 基本運算 以下介紹簡單的運算方式，另外還有很多其他函數可以做基礎或進階的數學換算或運算，若有需要使用到可自行查找 3.2.1 數學基本運算 num1 &lt;- 1 num2 &lt;- 10 # 加 + num1+num2 ## 1+10 = 11 # 減 - num1-num2 ## 1-10 = -9 # 乘 * num1*num2 ## 1*10 = 10 # 除 / num1/num2 ## 1/10 = 0.1 # 餘數 %% 10%%3 ## 10除以3後所得餘數 # 次方 ^ 10^2 ## 10的2次方 = 100 3.2.2 邏輯運算 num1 &lt;- 1 num2 &lt;- 10 # 大於 &gt; num1 &gt; num2 ## num1是否大於num2 -&gt; FALSE # 小於 &lt; num1 &lt; num2 ## num1是否小於num2 -&gt; TRUE # 等於 ==，為了不與變數設定混淆，判斷兩變數是否相等，要用雙等號 num1 == num2 ## num1是否等於num2 -&gt; FALSE # 大於等於 &gt;= num1 &gt;= num2 ## num1是否大於等於num2 -&gt; FALSE # 小於等於 &lt;= num1 &lt;= num2 ## num1是否小於等於num2 -&gt; TRUE # 且 &amp; TRUE &amp; TRUE ## TRUE TRUE &amp; FALSE ## FALSE # 或 | TRUE | TRUE ## TRUE TRUE | FALSE ## TRUE # 反向布林變數! !TRUE ## 不等於TRUE 所以是 FALSE 3.3 資料型態 3.3.1 數字(numeric): 數值包括整數integer（沒有小數點）與浮點數double（有小數點）的數值 5L # integer 3.14 # double 3 # double 3.3.2 字串(character): 用雙引號”框起的文字會被儲存為字串格式，若在數字前後加上雙引號，數字也會被儲存為文字形式，無法進行數值的加減乘除等運算。 &quot;Apple&quot; &#39;Friday&#39; 3.3.3 邏輯(logical): TRUE FALSE T F 3.3.4 日期(date): 使用 lubridate 套件可更好呈現 library(lubridate) ymd(&#39;2012/3/3&#39;) 3.4 資料結構 3.4.1 向量(vectors): 單維的資料，單一類型 concatenate(堆疊): 以c(…)將「相同類型」值以「逗點」分隔而形成的向量 # 同樣是數字 c(1, 2 ,3) c(c(1, 2), c(3, 4)) ## 等於c(1, 2, 3, 4) # 同樣是文字 c(&quot;apple&quot;, &quot;banana&quot;) # 若文字中混數字會被自動當作文字 c(&quot;apple&quot;, &quot;banana&quot;, 5) ## 等於c(&quot;apple, banana&quot;, &quot;5&quot;) 3.4.2 因子(factor): 因子是由向量轉換而成，多用於表示「類別數據｣ 例如有三種收入等級的類別，分別是低收入、中等收入、高收入， 使用方法為factor(資料向量,levels=類別次序)，levels參數可設定各類別的次序 # 原本是文字資料，設定類別 fac_1 &lt;- factor(c(&quot;低收入&quot;, &quot;中等收入&quot;, &quot;高收入&quot;, &quot;低收入&quot;), levels = c(&quot;低收入&quot;, &quot;中等收入&quot;, &quot;高收入&quot;)) table(fac_1) ## 查看次數分配 # 原本是數字資料，設定類別 fac_2 &lt;- factor(c(1, 2, 3, 1, 3), levels = c(1, 2, 3), labels = c(&quot;低收入&quot;, &quot;中等收入&quot;, &quot;高收入&quot;)) table(fac_2) ## 查看次數分配 # 若是資料多了一個4沒有被設定類別 -&gt; 被當成缺失值 fac_3 &lt;- factor(c(1, 2, 3, 1, 3, 4), levels = c(1, 2, 3), labels = c(&quot;低收入&quot;, &quot;中等收入&quot;, &quot;高收入&quot;)) table(fac_3) ## 查看次數分配 3.4.3 清單(list): 可以包含向量、矩陣、不同的清單，可以包含「不同的資料類型」。 通常統計跑完後，結果會儲存在清單之中 num_list &lt;- c(3, 4, 5) char_list &lt;- c(&quot;a&quot;, &quot;b&quot;) logic_list &lt;- c(TRUE, TRUE, FALSE) out_list_1 &lt;- list(num_list, char_list, logic_list, 3) ## or out_list_3 &lt;- list( c(3, 4, 5), c(&quot;a&quot;, &quot;b&quot;), c(TRUE, TRUE, FALSE), 3 ) ## or 給予名稱 out_list_2 &lt;- list( num_list = c(3, 4, 5), char_list = c(&quot;a&quot;, &quot;b&quot;), logic_list = c(TRUE, TRUE, FALSE), 3 ) 3.4.4 矩陣(matrices): 二維的資料，單一類型 mat_1 &lt;- matrix(1:4, nrow = 2, ncol = 2) mat_2 &lt;- matrix(1:9, nrow = 3, ncol = 3) 3.4.5 陣列(array): 多維度的資料，單一類型 vec_1 &lt;- c(1, 2, 4) vec_2 &lt;- c(15, 17, 27, 3, 10, 11) output &lt;- array(c(vec_1, vec_2), dim = c(3, 3, 2)) 3.4.6 資料架構(data.frame)： 像是我們用的套裝統計軟體（如excel, spss, stata）中資料儲存的方式。 每一欄（Column）儲存不同的資料、每一列（Row）代表不同的觀察值 num_list &lt;- c(3, 4, 5) char_list &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) logic_list &lt;- c(TRUE, FALSE, TRUE) # 使用data.frame()來創建新的資料框 data_frame &lt;- data.frame(num_list, char_list, logic_list) # 或是將list 轉成data.frame data_list &lt;- list( num_list, char_list, logic_list ) data_list &lt;- as.data.frame(data_list) 3.4.7 查詢資料型態或結構 Type: 是查看電腦如何儲存資料，物件的基本型態 Class: 是查看物件的類別(螢幕顯示的型態)，及能對它進行的操作所做的分類 # type typeof(c(&quot;John&quot;, &quot;Mary&quot;)) ## &quot;character&quot; typeof(c(2, 3.1412)) ## &quot;double&quot; typeof(c(TRUE, TRUE, F)) ## &quot;logical&quot; # class class(c(&quot;John&quot;, &quot;Mary&quot;)) ## &quot;character&quot; class(c(2, 3.1412)) ## &quot;numeric&quot; class(c(TRUE, TRUE, F)) ## &quot;logical&quot; 3.4.8 轉換資料型態或結構 使用as.targetClass將值轉換為targetClass類。 as.numeric()將值轉換為數字類 as.character()將值轉換為字符類 其他轉換…… num_t1 &lt;- c(0.1, 2 , 4) char_t1 &lt;- c(&quot;0.1&quot;, &quot;2&quot;, &quot;4&quot;) num_t2 &lt;- as.character(num_t1) char_t2 &lt;- as.numeric(char_t1) class(num_t1) ## &quot;numeric&quot; class(num_t2) ## &quot;character&quot; class(char_t1) ## &quot;character&quot; class(char_t2) ## &quot;numeric&quot; 3.5 簡單條件判斷式 3.5.1 if-else敘述 邏輯判斷: if-else敘述 若if後所接邏輯判斷為真(TRUE)，就會執行if下方之程式碼，若為偽(FALSE)，則執行else下方之程式碼，若程式中沒有else片段，則不執行任何程式碼。 #舉例來說，若考試分數大於等於60分，則印出及格字樣， #小於60分則印出不及格字樣，程式範例如下 score &lt;- 59 if(score &gt;= 60){ print(&quot;及格&quot;) } if(score &gt;= 60){ print(&quot;及格&quot;) }else{ print(&quot;不及格&quot;) } 多重邏輯判斷: if-else if-else score &lt;- 95 if(score &gt;= 90){ print(&quot;優秀&quot;) }else if(score &gt;= 60){ print(&quot;及格&quot;) }else{ print(&quot;不及格&quot;) } 邏輯判斷簡化: ifelse ifelse()函數可用最短的方式取代if-else敘述， 使用方法為ifelse(邏輯判斷, 判斷為真要執行的程式碼, 判斷為偽要執行的程式碼) score &lt;- 80 ifelse(score &gt;= 60, &quot;及格&quot;, &quot;不及格&quot;) ifelse(score &gt;= 90, &quot;優秀&quot;, ifelse(score &gt;= 60, &quot;及格&quot;, &quot;不及格&quot;)) 3.6 管道控制pipe 在語法操作上，很常需要對於同一個變項進行重複操作，在此magrittr套件提供了一些可以讓程式更容易查看、理解的語法，而在R版本4.1.0後也有提後一個內建的符號來進行，以下對此作簡單介紹，後續資料處理的章節會較常使用到 參考1、參考2 3.6.1 |&gt; &amp; %&gt;% |&gt;為內建的連結符號，目的是要將符號左側的變項連結(放入使用)到符號右邊的函數 %&gt;%是magrittr套件中的其中一個管道，其使用方法大致與|&gt;一模一樣 library(magrittr) # 有個函數f()，想在函數當中放入x ## 方法1 f(x) ## 方法2 x |&gt; f() # 視為將x用於(放入)f()函數當中 x %&gt;% f() # 有個函數g()，考可以放入兩個參數，想在函數當中放入x ## 方法1 g(x, y) ## 方法2 x |&gt; g(y) x %&gt;% g(y) # 管道也可以連續使用 x |&gt; f(x) |&gt; g(y) x %&gt;% f(x %&gt;% g(y) ## 等於 g(f(x), y) 3.6.2 其他管道控制 magrittr套件中也包含其他讓程式更容易理解的管道，可以做為參考就好 %T%是臨時想查看f(x)但最後卻想只返回x值就可以使用x %T% f()，如此並不會改變x的值 %&lt;&gt;%如同%&gt;%，但是將原先x的值變為f(x)，使用x %&gt;% f()，可以將x變成f(x) … "],["基礎篇_元素的基礎操作.html", "Chapter 4 基礎篇_元素的基礎操作 4.1 選取 4.2 新增 4.3 替換 4.4 刪除 4.5 判斷位置 4.6 命名", " Chapter 4 基礎篇_元素的基礎操作 4.1 選取 4.1.1 取出vector中的元素 vector_choose &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) # 有多少位置可選(該元素的長度)： length(vector_choose) ## [1] 3 vector_choose &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) # 取出apple vector_choose[[1]] ## [1] &quot;apple&quot; head(vector_choose, 1) ## 取出vector_choose向量的前n個元素 # 取出banana和cat vector_choose[c(2, 3)] ## [1] &quot;banana&quot; &quot;cat&quot; vector_choose[c(2:3)] ## [1] &quot;banana&quot; &quot;cat&quot; tail(vector_choose, 2) ## 取出vector_choose向量的後n個元素 4.1.2 取出list中的元素 weather &lt;- list( today = list( list(&quot;台北市&quot;, c(highest_temp = 25)), list(&quot;新北市&quot;, c(highest_temp = 24)) ), tomorrow = list( list(&quot;台北市&quot;, c(highest_temp = 30)), list(&quot;新北市&quot;, c(highest_temp = 28)) ) ) # 查看整個list的架構或如下圖方式點選 print(weather) 若想較簡易得知list中元素位置，可以直接點選(如下圖) # 取出today當中的台北市 (若有名稱時[[&quot;&quot;]] 和$ 可以相互使用) weather[[&quot;today&quot;]][[1]][[1]] ## [1] &quot;台北市&quot; ## or weather$today[[1]][[1]] ## [1] &quot;台北市&quot; # 比較[[]] 和 [] 差別 taipei1 &lt;- weather$today[[1]][[1]] taipei2 &lt;- weather$today[[1]][1] taipei1 ## [1] &quot;台北市&quot; taipei2 ## [[1]] [1] &quot;台北市&quot; 上述可以看到選取資料時有[[]] 和 []兩種，差別在於: [[]]: 拿出某個物件值。weather$today[[1]][[1][[1]]將weather中today裡的台北市物件值拿出來，因此只留下單純的值。 []: 留下某個物件值。weather$today[[1]][[1][1]只留下weather中today裡的台北市，因此原先資料結構和名稱仍會留下。 如下圖taipei2還是list的結構，但taipei1是單純的Value。 # 取出tomorrow當中新北市的highest_temp值(25) 並保留highest_temp的名稱 weather$tomorrow[[2]][[2]] ## highest_temp 28 weather$tomorrow[[2]][[2]][1] ## highest_temp 28 # 取出tomorrow當中新北市的highest_temp值(25) 並捨棄highest_temp的名稱 weather[[&quot;tomorrow&quot;]][[2]][[2]][[&quot;highest_temp&quot;]] ## [1] 28 ## or weather$tomorrow[[2]][[2]][[1]] ## [1] 28 4.1.3 取出data.frame中的元素 #取得R內建資料 data(iris) # 查看欄位名稱 names(iris) #想取出第一列(row)第二行/欄(column)的數值 (直行橫列) iris[1, 2] # [row, column] #想取出第一、三行的資料 iris_c1_1 &lt;- iris[, c(1, 3)] ## or iris_c1_2 &lt;- iris[, c(&quot;Sepal.Length&quot;, &quot;Petal.Length&quot;)] # 用欄位名稱選取 ## or c13 &lt;-c (&quot;Sepal.Length&quot;, &quot;Petal.Length&quot;) iris_c1_3 &lt;- iris[, c13] ## or iris_c1_4 &lt;- iris[, c(T, F, T, F, F)] # 用布林變數選取 # 若只想取出一行，除了上述方法也可以用「$」選取 iris_c1_5 &lt;- iris$Sepal.Length # 用欄位名稱選取 4.2 新增 若要新增元素、首先我們必須知道元素的位置，也就是上一章節詳細介紹元素的部分， 1. 找出不存在的位置 2. 給予這個不存在位置一個值 例如，若想將範例vector_add中新增一個\"4\": vector_add &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) # 1.找出不存在的位置 ## vector_add 只有三個元素、因此第四個位置的元素是不存在的 vector_add[[3]] # 存在&quot;cat&quot; vector_add[[4]] # 不存在元素(會出現Error) # 2. 給予這個不存在位置一個值 ## 因此若想在vector_add加上第四個元素&quot;4&quot; ## 需要將&quot;dog&quot; 指派到vector_add的第四個位置 vector_add[[4]] &lt;- &quot;4&quot; vector_add # 也可以新增多個元素 vector_add1 &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) vector_add1[4:6] &lt;- c(&quot;4&quot;, &quot;5&quot;, &quot;6&quot;) vector_add1 ## or vector_add2 &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) vector_add2[c(4, 6 , 7)] &lt;- c(&quot;4&quot;, &quot;6&quot;, &quot;7&quot;) # 此時第5個位置會變成NA vector_add2 其他list或data.frame的新增也是類似相同概念 4.3 替換 若要替換元素、首先我們還是必須先知道要替換元素的位置， 1. 找出需要替換元素的位置 2. 給予這個需要替換元素的位置另一個值 例如，若想將範例vector_replace中原先的\"banana\"，替換成\"2\": vector_replace &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) # 1.找出需要替換元素的位置 ## vector_replace &quot;banana&quot;是在第二個位置 vector_replace[[2]] # 存在&quot;banana&quot; # 2. 給予這個需要替換元素的位置另一個值 ## 因此若想在vector_replace加上第四個元素&quot;4&quot;， ## 需要將&quot;dog&quot; 指派到vector_replace 的第四個位置 vector_replace[[2]] &lt;- &quot;2&quot; vector_replace # 也可以替換多個元素 vector_replace1 &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) vector_replace1[1:2] &lt;- c(&quot;1&quot;, &quot;2&quot;) # 此時&quot;apple&quot;和&quot;banana&quot;會變成&quot;1&quot;、&quot;2&quot; vector_replace1 ## or vector_replace2 &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) vector_replace2[c(1, 3)] &lt;- c(&quot;1&quot;, &quot;3&quot;) # 此時&quot;apple&quot;和&quot;cat&quot;會變成&quot;1&quot;、&quot;3&quot; vector_replace2 # 也可以同時新增和替換元素 vector_replace3 &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) vector_replace3[c(1, 3, 4)] &lt;- c(&quot;1&quot;, &quot;3&quot;, &quot;4&quot;) vector_replace3 其他list或data.frame的替換也是類似相同概念 4.4 刪除 若要刪除元素有兩種方式， 同樣先找出需要刪除元素的位置 第一種: 取出需要的元素，再回存自己(沒有取出的，即是刪去) 第二種: 取出不需要的元素，用-回存自己(回存-即是刪去)(只能用在vector) 例如，若想將範例vector_delete中原先的\"apple\"和\"cat\"刪除: vector_delete &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) # 1.找出需要刪除元素的位置 vector_delete[c(1, 3)] # 2. 取出需要的元素(&quot;banana&quot;)再回存自己(沒有取出的，即是刪去) vector_delete1 &lt;- vector_delete[[2]] vector_delete1 ## or 取出不需要的元素(&quot;apple&quot;、&quot;cat&quot;) vector_delete2 &lt;- vector_delete[-c(1, 3)] vector_delete2 另外list的形式是用NULL來刪除， 類似替換的概念，但替換成NULL(空的) 例如，若想將範例weather中原先的\"台北市\"刪除: weather &lt;- list( today = list( &quot;台北市&quot;, c(highest_temp = 25) ) ) weather # &quot;台北市&quot;的位置 weather$today[[1]] # 替換成NULL(刪除) weather$today[[1]] &lt;- NULL weather 4.5 判斷位置 在上述了解元素的操作後，我們還可以根據元素進行位置的判斷， 可以使用which()和%in% which()函數是進行()中的條件邏輯判斷，並返回位置 x %in% y 是針對左邊x是否包含在右邊y中，並返回邏輯值 vector_which &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) which(vector_which == &quot;apple&quot;) ## 返回apple的位置1 which(vector_which != &quot;apple&quot;) ## 返回不是apple的位置2、3 which(c(T,F,T)) ## 返回c(T,F,T)中為TURE值的位置。 vector_which %in% &quot;apple&quot; ## 返回邏輯值，apple的位置為TURE，不是的為FALSE 4.6 命名 若要對元素進行命名，需使用\"name\"=value， 在命名時只能夠使用=，不能使用&lt;- 另外在命名時，也可以使用`，如果是常規的命名，也可以都不加 或者可以使用setNames、names()相關函數 以向量為例，想對1、2、3分別命名為apple、banana、cat vector_name &lt;- c(1, 2, 3) # 方法1 vector_name1 &lt;- c(&quot;apple&quot; = 1 , &quot;banana&quot; = 2 , &quot;cat&quot; = 3) vector_name1 # 方法2 vector_name2 &lt;- c(`apple` = 1 , `banana` = 2 , `cat` = 3) vector_name2 # 方法3 vector_name3 &lt;- c(apple = 1 , banana = 2 , cat = 3) vector_name3 # 方法4 vector_name4 &lt;- setNames(c(1, 2, 3), c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;)) vector_name4 # 方法5 vector_name5 &lt;- c(1, 2, 3) names(vector_name5) &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) vector_name5 其他list或data.frame的替換也是類似相同概念 另外若元素有命名，前面的選取、新增等操作中，也可以用命名的文字來取代位置 vector_name &lt;- c(1, 2, 3) vector_name[[1]] vector_name1 &lt;- c(&quot;apple&quot; = 1 , &quot;banana&quot; = 2 , &quot;cat&quot; = 3) vector_name1[&quot;apple&quot;] "],["應用篇_資料讀取匯出合併與瀏覽.html", "Chapter 5 應用篇_資料讀取、匯出、合併與瀏覽 5.1 設定工作路徑 5.2 讀取資料 5.3 匯出資料 5.4 簡單資料合併 5.5 資料瀏覽", " Chapter 5 應用篇_資料讀取、匯出、合併與瀏覽 5.1 設定工作路徑 首先可以先設定放檔案路徑，(需要注意的是在路徑上平常多是使用\\，但在R中需要使用/) 設定好路徑之後，讀取或匯出資料就只需要寫檔案名稱，不用加上前面路徑，會直接存在設定路徑的資料夾中，若檔案需要放在另外位置，也只須在檔名前面加上需要存取的位置 可以對需要存放的資料夾按 右鍵-&gt;內容-&gt;位置或是右鍵-&gt;複製路徑 查看資料夾的路徑 若是使用R Project打開，除非需要更換路徑，不然預設就是R Project的資料夾 # 設定工作路徑 setwd(&quot;D:/Dropbox/R_for_NGO&quot;) # 顯示目前的工作路徑 getwd() 5.2 讀取資料 常見的Open Data儲存方式包括 表格式檔案（包含 CSV 資料(.csv)、Excel 試算表(.xlsx)、spss(.sav)、stata(.dta)、SAS(.sas7bdat)） 非表格式檔案（包含 TXT 資料、JSON 資料、XML資料） 但大多數的公開資料都可以直接下載CSV檔案，或是調查資料大多都有提供spss、stata或SAS的檔案格式，因此在此先介紹這個較簡單的方式， 另外其他透過網路爬蟲、API或JSON與XML格式的資料，暫不多做介紹，有興趣者可以到以下連結查看參考1、參考2、參考3 5.2.1 Import Dataset功能 (RStudio) 若是檔案為可直接下載(表格式檔案式)，包括文字檔、其他軟體的檔案格式， 在RStudio當中有提供直接點選讀取資料的功能，包括純文字.txt、.cvs、或Excel試算表.xslx、spss、SAS、Stata的檔案格式 下圖以讀取WVS_w7的.cvs檔案為範例， 1. 點選Import Dataset -&gt; From Text(readr)... 2. 出現視窗後點選左上角Browse，點選要輸入的檔案 3. 之後空白處會載入部分資料提供預覽，可以根據需求更改參數(左下角) 4. 右下角也有提供程式碼，且就是根據你點選的方式呈現，可以點選完後複製程式碼(右下有個類似紙的圖案)，這樣就可以留下讀檔案的紀錄 5. 若檔案中文字有亂碼也是在左下更改 # 讀取WVS_w7的.cvs檔案 library(readr) data &lt;- read_csv(&quot;data/WVS_w7/data.csv&quot;) View(data) # 但此時文字可能會有亂碼狀況，可以設定編碼 library(readr) data &lt;- read_csv(&quot;data/WVS_w7/data.csv&quot;, locale = locale(encoding = &quot;BIG5&quot;)) View(data) # 上面預設是讀取後命名為data，也可以自行更改 WVS_w7 &lt;- read_csv(&quot;data/WVS_w7/data.csv&quot;) # 或著讀取WVS_w7的.dta檔案 library(haven) data &lt;- read_dta(&quot;data/WVS_w7/data.dta&quot;) View(data) 5.3 匯出資料 在R處理完檔案後，通常會將資料匯出成其他另外檔案提供其他人使用，較常匯出使用的檔案格式tab分隔的文字檔.txt或是逗號分隔的文字檔.csv，有一些格式上的呈現可以另外再進行參數設定，這邊只會介紹簡單的匯出形式，若要調整可參考該函數的help文件 5.3.1 R物件.rds 若是處理到一半，之後還要繼續用R處理，可以先匯出成R物件檔案.rds，較方便自己下次處理，後續最後處理完成再轉換成其他常見檔案 # 取得R內建資料 data(iris) saveRDS(iris, &quot;iris.rds&quot;) ## 前面是data名稱、後面是要存的檔案名稱 5.3.2 文字檔.txt # 查詢write.table的help文件 ?write.table # 取得R內建資料 data(iris) # 匯出成.txt檔案 write.table(iris, file = &quot;iris.txt&quot;, sep = &quot;,&quot;, row.names = F, col.names = T) write.table的help文件，文件後面也有針對每個參數的描述 5.3.3 CSV檔.csv # 查詢write.csv的help文件 ?write.csv # 取得R內建資料 data(iris) write.csv(iris, file = &quot;iris.csv&quot;, row.names = F) 5.3.4 Excel 試算表.xslx 存成.xlsx需另外使用其他套件，在此使用的是writexl，但也有其他的套件也可以輸出成.xlsx(如openxlsx) # 載入writexl套件 library(writexl) # 查詢write_xlsx的help文件 ?write_xlsx # 取得R內建資料 data(iris) write_xlsx(list(iris = iris), &quot;iris.xlsx&quot;) 5.4 簡單資料合併 在資料當中有時需要新增整列或整行的資料， 可以使用rbind()和cbind()來完成(vector或是data.frame都適用) 若今天想在iris資料中加入新的一列(原先有150筆資料新增一筆) # vector rbind(c(1, 2, 3), ## 第一列 c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) ## 第二列 ) # 取得R內建資料 data(iris) names(iris) # 新增成另一個資料 iris_nrow &lt;- rbind(iris, ## 資料框 c(1, 2, 3, 4, &quot;setosa&quot;) ## 新增一列 ) ## or # 直接更換原先的資料 iris &lt;- rbind(iris, #資料框 c(1, 2, 3, 4, &quot;setosa&quot;) ## 新增一列 ) 若今天想在iris資料中加入新的一行(原先有四行) # vector cbind(c(1, 2, 3), ## 第一行 c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) ## 第二行 ) # 取得R內建資料 data(iris) names(iris) # 新增成另一個資料 iris_newcol &lt;- cbind(iris, ## 資料框 rep(&quot;newcol&quot;, nrow(iris)) ## 自行新增一行、或是有對應的資料可以直接新增 ) 5.4.1 其他資料轉換 5.4.1.1 用dplyr套件合併資料 在資料想以某個欄位為依據進行合併時(像是長期資料，想以個人id將兩波資料合併)， 可以使用R原先內建的merge或是用dplyr套件提供的相關指令 詳細可以查看參考1、參考2的整理 # 增加變數：使用R base的merge merge(data_frame1, data_frame2, by=&quot;idvar&quot;, all=TRUE) # 增加觀察值：使用dplyr的bind_rows() library(dplyr) bind_rows(data_frame1, data_frame2) 5.4.1.2 長寬資料轉換 在處理特殊資料或是一些特殊統計分析時，可能需要將資料做長寬轉換處理，tidyr套件中提供的兩個好用的函數pivot_longer()、pivot_wider()， 在此並不多作介紹，有興趣可以查看參考1、參考2 5.5 資料瀏覽 若已經將資料讀取到R裡面，一開始需要看一下或檢查資料的大致狀況如何 以內建資料WVS_w7為例: 5.5.1 資料屬性查詢函數 # 讀取WVS_w7資料 library(readr) WVS_w7 &lt;- read_csv(&quot;data/WVS_w7/data.csv&quot;, locale = locale(encoding = &quot;BIG5&quot;)) # 查看資料內容 View(WVS_w7) ## 查看資料 head(WVS_w7) ## 查看前6筆資料內容 tail(WVS_w7) ## 查看後6筆資料內容 # 查看資料各種名稱 names(WVS_w7) ## 顯示資料名稱 colnames(WVS_w7) ## 顯示欄位名稱 rownames(WVS_w7) ## 顯示列名稱(若沒有則顯示編號) dimnames(WVS_w7) ## 先顯示列再顯示欄位的名稱 # 查看資料長度 length(WVS_w7) ## 顯示資料查度(若為data.frame會顯示欄位數) dim(WVS_w7) ## 先顯示列再顯示欄位的長度 # 顯示資料的架構資訊 str(WVS_w7) class(WVS_w7$a01) ## 數值資料 class(WVS_w7$m25s) ## 文字資料 # 簡單查看資料分配 table(WVS_w7$a01) ## a01(性別)次數分配 table(WVS_w7$m25s) ## m25s(投票給政黨選擇其他的回答)次數分配 # 上述函數也可以合併使用 ## 顯示前6筆資料的a01(性別)次數分配 table(head(WVS_w7)$a01) 5.5.2 資料排序 另外也可以對向量或資料進行排序 nosort &lt;- c(1, 6, 5, 8, 2, 3) sort(nosort) ## 預設是由小排到大 sort(nosort, decreasing = T) ## 由大排到小 # 讀取WVS_w7資料 library(readr) WVS_w7 &lt;- read_csv(&quot;data/WVS_w7/data.csv&quot;, locale = locale(encoding = &quot;BIG5&quot;)) head(WVS_w7$a01) ## 顯示a01(性別)前6筆資料 head(sort(WVS_w7$a01)) ## 顯示排序之後的Sepal.Width前6筆資料 head(order(WVS_w7$a01)) ## 顯示排序之後前6筆資料的原始位置(由小到大) head(order(WVS_w7$a01, decreasing = T)) ## 顯示排序之後前6筆資料的原始位置(由大到小) ## 根據排序之後的a01(性別)前6筆資料的原始位置，來排序整個資料 head(WVS_w7[order(WVS_w7$a01), ]) 5.5.3 用dplyr瀏覽 dplyr套件有許多函數可以更方便的瀏覽或操作data.frame資料，在此先介紹部分關於瀏覽相關功能，之後章節會進一步介紹處理資料功能， dplyr cheat sheet、參考1、參考2、參考3、參考4 select(): 可以選擇要分析的欄位(Column) filter(): 可以選擇要分析的觀察值(Row) arrange(): 用來排序觀察值 group_by(): 用來分組瀏覽 # 讀取WVS_w7資料 library(readr) WVS_w7 &lt;- read_csv(&quot;data/WVS_w7/data.csv&quot;, locale = locale(encoding = &quot;BIG5&quot;)) # 載入套件 library(tidyverse) ## 整合性的資料分析(包括dplyr) ## OR library(dplyr) ## 也可以直接載入dplyr # select() 若只想要查看欄位 id、a01(性別) WVS_w7 %&gt;% select(id, a01) # filter() 若只想要查看觀察值 a01(性別) = 1(男性) WVS_w7 %&gt;% filter(a01 == 1) # arrange() 若想根據a01(性別)和id排序(先排序a01再排id) WVS_w7 %&gt;% arrange(a01, id) # group_by() 若想根據a01(性別)進行分組來看男女性不同的年齡平均 ## 通常是與summarise()結合使用，來查看描述統計 WVS_w7 %&gt;% group_by(a01) %&gt;% summarise(age_mean = mean(a03)) 5.5.4 其他 5.5.4.1 data.table data.table是data.frame資料格式的延伸，在處理或讀取資料上比data.frame還來的有效率， 這部分進階的可以參考1 "],["應用篇_實作簡單資料處理.html", "Chapter 6 應用篇_實作簡單資料處理 6.1 前置準備 6.2 資料檢誤 6.3 設定不合理值 6.4 新建/修改/轉換變項 6.5 遺漏值處理 6.6 其他處理 6.7 匯出資料", " Chapter 6 應用篇_實作簡單資料處理 接下來會使用前面範例的WVS_w7中CSV格式的檔案，來繼續示範資料的初步清理與整理， 以下範例會以關於台灣中生育小孩及照顧父母這兩個的價值觀作為簡單的發想進行操作， 「不同性別、年齡的人會如何思考-&gt;生育小孩是盡社會的責任與成年子女有責任長期照顧父母的價值觀」 上一章節有介紹過一些瀏覽資料的語法，在此因為我們匯入的是沒有標籤的csv資料，各個變項與值代表什麼可以到調查問卷或codebook查看， 由此可知B37變項所代表的是「是否同意生育小孩是盡社會的責任」，且值代表的是「1是非常同意、5是非常不同意」 由此可知B38變項所代表的是「是否同意成年子女有責任長期照顧父母」，且值代表的是「1是非常同意、5是非常不同意」 從問卷可得知以下面變項再資料當中題號、題目與值代表的意思: (問卷的題號有時也會跟資料不太一樣，以此份資料為例，問卷為大寫字母、而資料為小寫字母) 性別 = A01 年齡 = A03 生育小孩是盡社會的責任 = B37 成年子女有責任長期照顧父母 = B38 6.1 前置準備 6.1.1 讀取需要使用套件 以下為資處常使用的套件: 大部分的資處會使用到一個整合性的套件tidyverse(上述連結點進去後，可以根據不同套件的連結查看套件的cheatsheet)，其功能非常強大，在此只會簡單介紹關於資處的部分內容， 在接續下面分析前請先library以下套件 library(tidyverse) ## 大部分的資處工具 (包含dplyr套件) library(data.table) ## 高效能資處工具 library(DescTools) ## 初步描述統計 library(sjmisc) ## 設置缺失值 library(sjlabelled) ## 上標籤用 library(validate) ## 資料檢誤 接下來關於資料清理的部分，並不會特別單一仔細的講解，而是會使用簡單的實際例子來呈現，並適時補充一點額外的解釋，當然由於R語言的功能強大有很多套件，也持續在整合並強化，下面介紹的資料清理可能不會是唯一的方式，也不一定是最有效率方式，但仍可以稍微參考。 6.1.2 設定工作路徑 setwd(&quot;D:/Dropbox/R_for_NGO&quot;) 6.1.3 讀取檔案 library(readr) WVS_w7 &lt;- read_csv(&quot;data/WVS_w7/data.csv&quot;, locale = locale(encoding = &quot;BIG5&quot;)) 6.1.4 選取需要的變項到新的資料檔中 WVS_w7_n1 &lt;- WVS_w7[c(&quot;id&quot;, &quot;a01&quot;, &quot;a03&quot;, &quot;b37&quot;, &quot;b38&quot;)] 6.1.5 瀏覽資料 查看變項初步分配，來檢查是否有不合理值或缺失值 (以下指令都還有各自呈現的細節可以調整，可自行查看該指令的help) # 初步查看次數分配(以b37為例) table(WVS_w7_n1$b37, useNA = &quot;always&quot;) ## 呈現簡單次數分配(useNA 是設定列出是否有NA) frq(WVS_w7_n1$b37) ## 呈現更多內容的次數分配表與簡單描述統計 上圖為frq(WVS_w7$b37)的結果，我們初步得知此資料當中，b37變項有多少人/比例回答非常同意或非常不同意，但須注意可以看到有97、98的選項，從問卷當中可得知「97是不知道、98是拒答」，回答這兩個選項的應該是不會被納入分析當中，接下來也會說明如何處理， 6.2 資料檢誤 一開始可能可以做一些「資料檢誤」的工作來檢查資料，validate就是較有效率處理的套件，以下只做簡單介紹，更多詳細檢誤方式可以參考1、參考2 # 以下簡單設定幾個檢誤條件 rules &lt;- validator( is_unique(id), ## 檢查是否有重複id a03 &gt;= 18 &amp; a03 &lt;= 85 ## 檢查年齡是否在18-85之間(資料只對18-85歲抽樣) ) out &lt;- confront(WVS_w7_n1, rules) ## 前面放使用data，後面放檢誤規則 results &lt;- summary(out) %&gt;% ## 呈現檢誤結果 as.data.frame() results vilt = violating(WVS_w7_n1, out[2]) ## 查看那些資料是不符合檢誤的條件，out中是設定幾個檢誤條件 vilt 6.3 設定不合理值 資料可能會有一些不合理的值，或是像上述「97是不知道、98是拒答」，在分析上會當作遺漏值處理 R語言的遺漏值是以NA表示，但可以進一部細分成數值型的遺漏值NA_integer_或是字串型的遺漏值NA_character_ 以下僅列出部分方式，但同樣也有其他套件可以做到相同的設定遺漏值 目標是先將96/99都當作NA處理，並回傳到新的dataframeWVS_w7_n2 WVS_w7_n2 &lt;- WVS_w7_n1 %&gt;% ## %&gt;% : pipe 將WVS_w7_n1(資料)用於mutate()函數中 mutate( ## 使用dplyr套件中的 mutate()代表創建/修改變項 # 第一種設定遺漏值方式(用if_else) a01 = if_else(a01 %in% c(96:99), ## 當a01的值在(%in%) 96-99之間， NA_integer_, ## 設定為遺漏(NA_integer_)， a01), ## 其他回傳原本的值 # 第二種設定遺漏值方式(用set_na) a03 = set_na(a03, na = c(96, 97, 98, 99)), ## 設定a03當中96-99為NA b37 = set_na(b37, na = c(96:99)), b38 = set_na(b38, na = c(96:99)) ) view(WVS_w7_n2) 6.4 新建/修改/轉換變項 接著我們可以對變項進行一些修改， 以下僅列出部分方式，但同樣也有其他套件可以做到相同的資料清理 性別 = a01 原先: 1 = 男 2 = 女 修改成: 0 = 男 1 = 女 轉成類別變項(factor)並命名為female 年齡 = a03 原先: 連續的數值 1.新建一個變項等於A03，命名為age 2.修改成: 18/29 = 青年 30/64 = 中年 65/85 = 老年， 轉成類別變項(factor)並命名為age_g3 生育小孩是盡社會的責任 = b37 原先: 分數越大越不同意(1是非常同意、5是非常不同意) 修改成: 分數越大越同意(1是非常不同意、5是非常同意)並命名為duty_child 成年子女有責任長期照顧父母 = b38 原先: 分數越大越不同意(1是非常同意、5是非常不同意) 修改成: 分數越大越同意(1是非常不同意、5是非常同意)並命名為duty_parents WVS_w7_n3 &lt;- WVS_w7_n2 %&gt;% ## %&gt;% : pipe 將WVS_w7_n2(資料)連結到mutate()函數 mutate( ## 使用dplyr套件中的 mutate()代表創建/修改變項 # 性別 female = case_match( ## case_match 將變項值重新編碼 a01, 1 ~ 0, 2 ~ 1, ## 原先1變成0、2變成1 .default = NA ## 其他沒定義到的設定成NA(也設定成返回原先a01的值) ), # 年齡 age = a03, # 年齡三分組 age_g3 = case_match( a03, c(18:29) ~ 1, c(30:64) ~ 2, c(65:85) ~ 3, .default = NA ), # 同意生育小孩是盡社會的責任 ## 第一種方式: case_match 將變項值重新編碼 duty_child = case_match( b37, 1 ~ 5, 2 ~ 4, 3 ~ 3, 4 ~ 2, 5 ~ 1, .default = NA ), # 成年子女有責任長期照顧父母 ## 第二種方式: 直接做數學運算 duty_parents = 6 - b38 ) %&gt;% ## 可以根據上面mutate好的變項再連結到下面transform函數 transform( ## 轉換資料型態 female = factor( ## 將前面重新編碼的female變成類別變項(factor) female, levels = c(0, 1), ## 設定類別的順序 labels = c(&quot;男&quot;, &quot;女&quot;) ## 設定類別的標籤 ), age_g3 = factor( ## 將前面重新編碼的age_g3變成類別變項(factor) age_g3, levels = c(1, 2, 3), ## 設定類別的順序 labels = c(&quot;青年&quot;, &quot;中年&quot;, &quot;老年&quot;) ## 設定類別的標籤 ) ) # 將不需要的欄位刪除 WVS_w7_n3 &lt;- subset(WVS_w7_n3, select = c(-a01, -a03, -b37, -b38)) view(WVS_w7_n3) 6.4.1 將資料上標籤 另外除了剛剛factor有上值標籤(labels)，其實也有其他套件可以幫助數值變項上標籤 可以在呈現時更容易了解 # 可以先查看次數分配，此時duty_child是沒有值標籤的 frq(WVS_w7_n3$duty_child) # set_label 變項標籤variable labels WVS_w7_n3 &lt;- WVS_w7_n3 %&gt;% mutate( female = set_label(female, label = &quot;性別&quot;), duty_child = set_label(duty_child, label = &quot;同意生育小孩是盡社會的責任&quot;) ) # set_label 變項值標籤value labels WVS_w7_n3 &lt;- WVS_w7_n3 %&gt;% mutate( female = set_labels(female, labels = c(&quot;男&quot; = 0, &quot;女&quot; = 1, &quot;遺漏值&quot; = 96)), duty_child = set_labels(duty_child, labels = c(&quot;非常不同意&quot; = 1, &quot;非常同意&quot; = 5, &quot;拒答&quot; = 98)) ) # 再次查看次數分配可以看到有值標籤了 frq(WVS_w7_n3$duty_child) 6.5 遺漏值處理 若將需要分析的變項都清理、創建/修改整理好後，不同的變項可能有不同數量的遺漏值，在此這些缺失值可能就會導致在分析上樣本數的差距 對於這些缺失值有很多種處理方式，但在此不會特別介紹， 以下將所有有缺失的資料在分析時用complete.cases一併排除 # 查看遺漏值 is.na(WVS_w7_n3$duty_child) ## 遺漏值的位置會顯示成TRUE sum(is.na(WVS_w7_n3$duty_child)) ## 計算遺漏值的數量 # 排除遺漏值 WVS_w7_n4 &lt;- WVS_w7_n3[complete.cases(WVS_w7_n3), ] 6.6 其他處理 除了上述所說的清理方式，實務上可能還會碰到其他類型需要較複雜處理的資料，以及其他方式的清理，以下列出兩個常見處理的資料型態，有需要者可再進一步查看，當然也有蠻多部分可能是講義所沒有列出，若有碰到再自行上網查找相關方法 6.6.1 字串處理 除了上述簡單介紹的對於「數值」資料的處理，另外也有針對「字串」資料的處理， 但這部分較複雜，有興趣者至以下連結參考，參考1、參考2、參考3 6.6.2 時間資料處理 有時資料也會包括時間形式的數據，而lubridate就是專門處理時間數據的套件，有興趣者有可以自行參考 6.7 匯出資料 最後我們需要將資料輸出以便後續分析或保存，前一章節有介紹過如何輸出資料 在此，當我們資料清理好後，可能之後還需要做進一步的分析，但若並不是在同一時間來做或需換個檔案來寫分析時，可以將處理好的檔案先暫時存成.rds檔案，以便之後繼續在R語言使用 若整理好也可以存成其他格式 # 存成.rds檔 saveRDS(WVS_w7_n4, &quot;data/practice/WVS_w7_n4&quot;) "],["應用篇_探索性資料分析.html", "Chapter 7 應用篇_探索性資料分析 7.1 資料視覺化簡略介紹 ggplot2 7.2 簡單呈現探索式資料分析", " Chapter 7 應用篇_探索性資料分析 所謂探索式資料分析(Exploratory data analysis, EDA)，是在做統計分析前，利用資料本身的特性、分布等，進行描述、簡單統計、以及視覺化呈現，目的是為了更了解資料，可以觀察初步發現並排除資料有可能的錯誤，接下來再進一步用進階統計做分析(以下部分內容參考1、參考2講義) 而探索式資料分析主要可以分成兩方面: 1.對於單變項/雙變項的初步描述統計、交叉表或相關 2.對整體資料或上述的簡單統計進行視覺化 7.0.1 前置準備 library(tidyverse) ## 大部分的資處工具(包含ggplot2套件) library(data.table) ## 高效能資處工具 library(DescTools) ## 初步描述統計 library(sjmisc) ## 設置缺失值 library(sjlabelled) ## 上標籤用 library(validate) ## 資料檢誤 ## 讀取上一章節處理好的資料 WVS_w7_n4 &lt;- readRDS(&quot;data/practice/WVS_w7_n4&quot;) 7.1 資料視覺化簡略介紹 ggplot2 在進入探索性分析前，需要簡單介紹一下R語言當中資料視覺化的工具， R語言當中有內建的基本簡單作圖，但更加常用與更廣為推薦的是使用Hadley Wickamn所創建的ggplot2套件，而ggplot2套件功能的豐富，也是R語言相較於其他軟體資料視覺化的功能強大的地方， 但接下來只會先對於ggplot2套件做非常粗略的介紹，目的是為了可以簡單呈現接下來的探索性資料分析，進一步的美編或細節相關調整等複雜的內容則不會介紹， 有興趣者可以進一步查看ggplot2 cheat sheet、參考1、參考2、參考3、參考4 另外再更進階的部分也有像是ggplot2加上地圖、互動式的資料視覺化……等其他呈現方式 使用ggplot2作圖的一般步驟:參考3 準備好需要使用且清理好的資料 將資料輸入進ggplot()函數中，並設定相關使用變項所對應(aesthetics)的座標軸、顏色、形狀…… 再來選擇適合的圖形類型、使用geom_xxx()相關函數(xxx需輸入對應圖形，例如geom_point()表示散佈圖) 將ggplot()函數用+與geom_xxx()相關函數做連結，此時已經可以作圖 接著是設定一些細節部分，像是標籤、調整位置……等，依樣用+連結 當然上述只是簡單步驟，實務上還是有蠻多調整上的細節，ggplot2 cheat sheet，有更多調整的函數，其他也有各種樣式可供選擇 # 整體大致簡單結構 ## ggplot p &lt;- ggplot(data = 使用資料, mapping = aes( 维度 = 變項名稱, ## 像是想設定y軸為duty_child，y = duty_child 维度2 = 變項名稱2, ...) ## ggplot的結果 + geom_ + 其他設定 p + geom_圖形類型(...) + ## 使用哪種圖形、並做進階設定 scale_對應座標_顯示設定(...) + ## 座標相關設定 labs(...) ## 標籤相關設定 7.2 簡單呈現探索式資料分析 (下列接續的分析只是挑選變項來示範操作，可能兩者並沒有太多關係或意義) 在呈現探索式資料分析前，我們可以再一次整體瀏覽一下清理好的資料， 利用skimr套件可以整體查看分析資料各個變項的狀況(細節可再設定)， 輸出結果呈現三個表， 第一個整理出資料名稱、樣本數、變項數、以及幾個類別/數值變項 第二個整理出類別變項的資訊、包括遺漏值、樣本數、幾個類別與類別的資訊 female、age_g3 第三個整理出數值變項的資訊、包括遺漏值、數值變項的初步描述資訊 age、duty_child、duty_parents library(skimr) ## skim(資料, 選擇要查看變項，沒有設定則是全部) skim(WVS_w7_n4, female, age, age_g3, duty_child, duty_parents) |&gt; print() 7.2.1 單一類別變項 以性別(female)為例，呈現男女性的次數分配 可以看到男性的樣本為592筆、佔約49%，女性的樣本稍多一點為625筆、佔約51% # 次數分配 ## 使用直接計算方式 WVS_w7_n4 |&gt; count(female) |&gt; ## count 計算樣本數 mutate( female_pct = n / sum(n) ## 計算出百分比 ) ## 使用table()函數 table(WVS_w7_n4[[&quot;female&quot;]]) table(WVS_w7_n4[[&quot;female&quot;]]) |&gt; prop.table() 接著也可以用長條圖先來呈現(以下僅為簡單粗略呈現，若要美化則須再調整) # 畫圖呈現 ## 畫圖(長條圖)呈現男女分別樣本數 ## 先建立一個次數分配表 d_female &lt;- WVS_w7_n4 |&gt; count(female) |&gt; mutate( pct = n / sum(n) ## 計算百分比 ) ggplot(d_female, aes(x = female, y = n)) + geom_col() ## geom_col()是長條圖 ## 畫圖(長條圖)呈現男女分別百分比 ggplot(d_female, aes(x = female, y = pct)) + geom_col() + scale_y_continuous( name = &quot;Percent&quot;, labels = scales::percent) 7.2.2 單一數值變項 以年齡(age)為例，呈現描述統計 可以看到平均年齡和中位數都約落在48歲左右，年齡最小為1最小值為18歲、最大為85歲， # 描述統計 ## 使用summary函數 summary(WVS_w7_n4[[&quot;age&quot;]]) ## 若只想看平均數也可以直接指定 WVS_w7_n4 |&gt; summarize(mean = mean(age)) 接著也可以用直方圖、折線圖或盒形圖先來呈現(以下僅為簡單粗略呈現，若要美化則須再調整) # 畫圖呈現 ## 畫圖(直方圖)呈現 ggplot(WVS_w7_n4, aes(x = age)) + geom_histogram() ## geom_histogram()是直方圖 ## 畫圖(折線圖)呈現 ggplot(WVS_w7_n4, aes(x = age)) + geom_freqpoly(bins = 30) ## geom_histogram()是折線圖 ## 畫圖(盒形圖)呈現 ggplot(WVS_w7_n4, aes(x = &quot;&quot;, y = age)) + geom_boxplot() + ## geom_boxplot()是折線圖 labs(x = &quot;&quot;) 7.2.3 兩個類別變項 查看性別(female)與年齡三組(age_g3)的分布，做成交叉表的方式呈現 可以看到整體而言，這份資料不同年齡段男女性的比例也都是接近差不多的，男性在中年稍微多一點點、而女性則是在青年和老年稍微多一點點 # 交叉表 ## 用計算方式 d_female &lt;- WVS_w7_n4 |&gt; count(female, age_g3) |&gt; group_by(female) |&gt; ## 以female做分組 mutate(pct = n / sum(n)) |&gt; ungroup() d_female ## 使用table()函數 with(WVS_w7_n4, table( female, age_g3 )) ## 使用CrossTable()函數 with(WVS_w7_n4, gmodels::CrossTable( female, age_g3 )) 接著也可以用堆疊長條圖、並列長條圖先來呈現(以下僅為簡單粗略呈現，若要美化則須再調整) # 畫圖呈現 ## 堆疊長條圖 ggplot(d_female, aes( x = age_g3, fill = female, y = n)) + geom_col(position = &quot;stack&quot;) ## &quot;stack&quot; 指定堆疊 ## 並列長條圖 ggplot(d_female, aes( x = age_g3, fill = female, y = pct)) + geom_col(position = &quot;dodge&quot;) ## &quot;dodge&quot; 指定堆疊並列 7.2.4 兩個數值變項 查看年齡(age)和對於生育小孩是盡社會的責任(duty_child)的看法的關係，計算兩者相關係數 兩者的相關係數約為0.28，算是低度相關 # 相關係數 WVS_w7_n4 |&gt; summarize(cor = cor(age, duty_child, use=&quot;complete.obs&quot;)) 接著也可以用散布圖、並加上預測線先來呈現(以下僅為簡單粗略呈現，若要美化則須再調整) # 畫圖呈現 ## 散布圖 ggplot(WVS_w7_n4, aes(x = age, y = duty_child)) + geom_point() ## geom_point()是散布圖 ## 加上預測線 ggplot(WVS_w7_n4, aes(x = age, y = duty_child)) + geom_point() + geom_smooth() 7.2.5 一個類別一個數值變項 查看不同性別(female)，對於成年子女有責任長期照顧父母(duty_parents)的看法呈現 可以看到男性平均(3.96)略大於女性(3.7)，代表可能男性相較女性更同意成年子女有責任長期照顧父母，但可能還須進一步的統計去檢驗 # 分組描述統計 WVS_w7_n4 |&gt; group_by(female) |&gt; ## 以female做分組 summarize(mean = mean(duty_parents)) 接著也可以用分組盒形圖、分組折線圖線先來呈現(以下僅為簡單粗略呈現，若要美化則須再調整) # 畫圖呈現 ## 分組盒形圖 ggplot(WVS_w7_n4, aes( x = female, y = duty_parents)) + geom_boxplot() ## 分組折線圖 ggplot(WVS_w7_n4, aes( x = duty_parents, color = female)) + geom_freqpoly() 7.2.6 兩個數值變項用類別變項分組 查看不同性別(female)，如何影響對於年齡(age)對於生育小孩是盡社會的責任(duty_child)的看法 可以看到年齡和同意生育小孩是盡社會的責任的相關，女性(0.34)似乎比男性(0.23)來的大，但仍都屬於低度相關 # 分組相關係數 WVS_w7_n4 |&gt; group_by(female) |&gt; ## 以female做分組 summarize(cor = cor(age, duty_child, use=&quot;complete.obs&quot;)) 接著也可以用按照性別分組呈現散布圖、並加上預測線先來呈現(以下僅為簡單粗略呈現，若要美化則須再調整) # 畫圖呈現 ## 分組散布圖 ggplot(WVS_w7_n4, aes(x = age, y = duty_child)) + geom_point() + facet_wrap(~ female) ## 按照性別分組 ## 加上預測線 ggplot(WVS_w7_n4, aes(x = age, y = duty_child)) + geom_point() + geom_smooth() + facet_wrap(~ female) ## 按照性別分組 7.2.7 其他進階統計 前面章節呈現了初步探索性資料分析，讓我們可以簡單了解各個變項簡單的分布資訊，但若是要進一步去探討變項間的關係，可能還會需要做其他的統計檢定，這邊就涉及到了其他進階相關的統計知識與分析技巧，這份講義並不會特別提到，R語言在統計方法上也提供非常多相關套件，另外R語言也有提供資料探勘、機器學習…其他進階探索、處理與分析資料的相關的方法，如果有興趣者可以再去參考相關進階講義。 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
