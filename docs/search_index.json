[["index.html", "R for NGO Chapter 1 前言_關於本講義 1.1 R語言 應用性: 高、難度: 中高 1.2 學習目標 1.3 參考資料 1.4 資料 1.5 大綱(教材主題)", " R for NGO 台北大學社會所_吳永健 2023-09-23 Chapter 1 前言_關於本講義 講義的資料若有錯誤，再麻煩寄信告知修改 email: qbieqbiexyz@gmail.com 這份講義是希望讓原本沒有程式與或統計基礎的人，能夠在短時間初步了解R語言的簡單概念和操作，以及能夠進行初步的資料讀取、清理、分析與視覺化。 由於是初步介紹的入門講義，因此會簡單介紹一下R的基礎概念，但部分過於涉及程式設計的部分會稍微略過，重點會放在了解R的基礎概念、資料處理以及後續使用資料實作初步統計與視覺化部分 目的是讓讀者能夠輕鬆並短時間知道使用資料的好處，因此在分析或實作上，也不會涉及到深入的統計或視覺化， 若是在看過這份講義後對進階分析有興趣者，可以到以下所列參考書籍或資源，進一步學習。 1.1 R語言 應用性: 高、難度: 中高 R的好處在於免費、靈活，且有許多額外的套件輔助分析，若想要做的分析一般的套件沒有支援時，可以自寫函數或程式來處理，另外在統計方法與視覺化上面都有很多應用，且網路上有很多自學資源以及論壇解答遇到的問題。 缺點在於，由於R是由類似程式語言的方式執行，因此在學習上會比excel、spss、stata等統計軟體再困難一些，較接近python，因此學習坡度較高、需要學習程式語言，且一些新的外裝套件並沒有通過學術檢證、沒有售後服務。 1.2 學習目標 初步認識R語言與R語言基礎概念 運用R語言讀取、整理資料 運用R語言進行簡單資料清理 運用R語言進行簡單探索性分析與資料視覺化 1.3 參考資料 1.3.1 講義 本講義是擷取/修改下列講義部分內容，希望能透過更簡易的方式了解資料分析初步內容與過程，若因此對於資料分析有興趣，想嘗試更進階/深入的資料分析， 建議深入查看以下講義中更完整的內容。 R for Data Science R for Data Science (2e) 量化研究方法實作(課堂教材)，by 陳易甫 資料科學與R語言，by 曾意儒 Programming for Data Science (I)，by 林茂廷 輕鬆學習 R 語言，by 郭耀仁 R 資料科學與統計，by 林建甫 R语言教程 R for Fledglings R for HR:An Introduction to Human Resource Analytics Using R R for Epidemiology R Package Showcase tidyverse 1.3.2 其他學習資源 其他進階R books 各種Cheatsheets base R cheat-sheet RPubs Posit 網路上的各種筆記或論壇 1.4 資料 開放資料(英語：Open data)指的是一種經過挑選與許可的資料。這種資料不受著作權、專利權，以及其他管理機制所限制，可以開放給社會公眾，任何人都可以自由出版使用，不論是要拿來出版或是做其他的運用都不加以限制。 1.4.1 政府公開資料相關資源 以下列出台灣部分的政府公開資料，下面列出的只是一小部分，還有很多其他政府或非政府的Open data可以自行探索 政府資料開放平台 Data Station-開放數據 臺北市資料大平台 社會經濟資料服務平台 中華民國統計資訊網 PRIDE政策研究指標資料庫 除台灣外，世界各國也有各自的Open data，可以用關鍵字自行查找，另外也有網站整理世界各地約2600以上的開放資料庫，可以按照地圖去查找 參考: 資料分析人的福利：20個免費開放資料源 1.4.2 公開調查資料 另外也有一些「調查資料」可以免費提供申請下載使用，調查資料可能不像Open data一樣可以隨意使用，但多數公開的調查資料經申請後即可下載使用， 在台灣多數有公開的調查資料會被整理在「SRDA學術調查資料庫」當中，其中也包括政府每年的調查型資料，兩者都可以提供申請下載使用，但也需注意相關的參考格式 若需要下載資料需要先加入會員，一般而言若不具有學術身分，也可以加入網路會員 在youtube上也有SRDA頻道與一系列使用教學，若有需要可自行觀看 調查型資料的資源也非常豐富，SRDA也只是整理出部份台灣的調查資料，另外一些可能是放在該調查官網需自行下載，或是跨國型資料、國外的調查資料，有些可能須申請，有些是公開的，大多數都有問卷可以先查看是否有想要分析的題目再決定是否使用該資料，若有需要可以依需求自行搜索並下載 1.4.3 使用資料 講義有使用到的資料都可以從這裡下載 1.5 大綱(教材主題) 基礎篇_R的介面與R studio的介紹 什麼是R 和 Rstudio 下載R 和 Rstudio Rstudio介面與初步設定 簡介R套件 錯誤訊息 基礎篇_R語言的基礎概念 物件基礎操作 資料型態 基本運算 資料結構 簡單條件判斷式 管道控制pipe 基礎篇_元素的基礎操作 值與元素 元素位置 檢索/取出元素 [[]]和[] 差異 替換元素 新增元素 刪除元素 判斷位置的其他方法 元素命名 應用篇_資料讀取、匯出、合併與瀏覽 設定工作路徑 讀取資料 匯出資料 簡單資料合併 資料瀏覽 應用篇_實作簡單資料處理 前置準備 設定不合理值 新建/修改/轉換變項 遺漏值處理 其他處理 匯出資料 應用篇_探索性資料分析 資料視覺化簡略介紹 ggplot2 簡單呈現探索式資料分析 "],["基礎篇_r-與r-studio的介紹.html", "Chapter 2 基礎篇_R 與R studio的介紹 2.1 什麼是R 和 Rstudio 2.2 下載R 和 Rstudio 2.3 Rstudio介面與初步設定 2.4 簡介R套件 2.5 錯誤訊息", " Chapter 2 基礎篇_R 與R studio的介紹 2.1 什麼是R 和 Rstudio R是一套開放式的統計程式語言，主要用於資料分析與統計運算，同時也具有強大的繪圖功能，R語言不僅是統計專業人員的研究工具，也是資料科學家經常使用的重要工具之一，使用者可以免費的下載並安裝在任何的作業系統上。 R studio是一套提供R整合開發環境的軟體(Integrated Development Environment; IDE）。 2.2 下載R 和 Rstudio 先裝R，再裝R studio Install R: Windows: https://cran.r-project.org/bin/windows/base/ Mac: https://cran.r-project.org/bin/macosx/ Install RStudio Desktop: https://www.rstudio.com/products/rstudio/download/#download 2.3 Rstudio介面與初步設定 2.3.1 Rstudio介面 2.3.2 Rstudio初步設定 Tools &gt; Global Options Code: Display 下勾選Show whitespace characters。 (coding時更清楚前面空格狀況) Appearance: 可改變RStudio Theme. (可以改成深色模式讓眼睛休息一下) 2.3.3 新建R Script R Script(.R file)是純粹執行R的語法 另外還有R Markdown or R Notebook (.Rmd file)，是用markdown方式呈現將文字、程式、表格與圖都編輯在同一份文件之中(在此不多做介紹) 2.3.4 新建R project 若想要執行的是一個計劃或同一個工作，可能會想將檔案或資料集中在同一個地方，這時可以新建一個New Project的資料夾，將東西統一存放 New Project -&gt; New Directory -&gt; New Project -&gt; 設定Project Name 和放檔案的路徑與資料夾 2.3.5 小技巧 可以在上述地方察看快捷鍵的指令， 也有一些常用的快捷鍵整理提供參考 另外比較重要的是R的註解標籤是# 2.4 簡介R套件 R語言有很多的套件，這些套件可以簡單理解為「特定目的的函式、文件、資料之集合」(參考) 這些套件有些是下載完就內建的，有些是需要外部安裝的，而R語言的強大之處也建立在這些套件上 2.4.1 安裝套件 安裝套件：安裝只需要做一次，就是將你要的套件從網路上抓下來並安裝到你的電腦裡 若是外部的套件，第一次使用時需要先「安裝」 例如，我們想要裝haven這個套件。 # 安裝套件： install.packages(&quot;haven&quot;) 安裝完成後，右邊packages就會跟著出現 2.4.2 載入套件 載入套件：確定要用的套件已經在電腦中後，在使用前，需要將該套件載入至R才能夠使用 但是安裝不等於載入，在每次開啟R檔案時，若需要使用套件中的函數，必須先載入後才能夠使用 # 載入套件： library(haven) ## or require(haven) 也可以用勾選的方式 2.4.3 刪除套件 當我們可能裝錯套件時，也可以直接刪除特定套件 remove.packages(&quot;haven&quot;) 或著直接按旁邊的X 2.4.4 更新套件 另外R語言中的套件時常進行更新，我們可以一次檢查那些需要更新 oldpackages 接著就可以點選進行特定套件的更新 或著也可以使用函數更新 # 更新所有套件 update.packages() # 更新特定套件如haven install.packages(&quot;haven&quot;) 2.4.5 輔助文件與help 至於套件或著裡面函數的詳細用法，我們可以用「help」來看這個套件的語法該如何設定 R語言當中有蠻完整的「查詢文件」可以查看 # 載入套件： library(haven) # 查詢套件/函數用法 help(haven) ## 查詢套件 help(read_dta) ## 查詢函數 ## or ?haven ?read_dta ## or 在想查詢的套件/函數上面按F1 2.4.6 安裝講義所用套件 可以一次安裝多個套件，以下為本講義會使用的套件 # 接下來會用到的套件 pkgs &lt;- c(&quot;haven&quot;, &quot;lubridate&quot;, &quot;magrittr&quot;, &quot;readr&quot;, &quot;writexl&quot;, &quot;devtools&quot;, &quot;dplyr&quot;, &quot;tidyverse&quot;, &quot;data.table&quot;, &quot;DescTools&quot;, &quot;sjmisc&quot;, &quot;sjlabelled&quot;, &quot;validate&quot;, &quot;skimr&quot;) # 一次安裝套件： install.packages(&quot;pkgs&quot;) 另外以下是本講義使用的R語言環境 devtools::session_info() ## ─ Session info ────────────────────────── ## setting value ## version R version 4.3.0 (2023-04-21 ucrt) ## os Windows 11 x64 (build 22621) ## system x86_64, mingw32 ## ui RTerm ## language (EN) ## collate Chinese (Traditional)_Taiwan.utf8 ## ctype Chinese (Traditional)_Taiwan.utf8 ## tz Asia/Taipei ## date 2023-09-23 ## pandoc 3.1.1 @ D:/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ────────────────────────────── ## package * version date (UTC) lib source ## bookdown 0.35 2023-08-09 [1] CRAN (R 4.3.1) ## bslib 0.5.1 2023-08-11 [1] CRAN (R 4.3.1) ## cachem 1.0.8 2023-05-01 [1] CRAN (R 4.3.0) ## callr 3.7.3 2022-11-02 [1] CRAN (R 4.3.0) ## cli 3.6.1 2023-03-23 [1] CRAN (R 4.3.0) ## crayon 1.5.2 2022-09-29 [1] CRAN (R 4.3.0) ## devtools 2.4.5 2022-10-11 [1] CRAN (R 4.3.1) ## digest 0.6.31 2022-12-11 [1] CRAN (R 4.3.0) ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.3.0) ## evaluate 0.21 2023-05-05 [1] CRAN (R 4.3.0) ## fastmap 1.1.1 2023-02-24 [1] CRAN (R 4.3.0) ## fs 1.6.2 2023-04-25 [1] CRAN (R 4.3.0) ## glue 1.6.2 2022-02-24 [1] CRAN (R 4.3.0) ## htmltools 0.5.5 2023-03-23 [1] CRAN (R 4.3.0) ## htmlwidgets 1.6.2 2023-03-17 [1] CRAN (R 4.3.1) ## httpuv 1.6.11 2023-05-11 [1] CRAN (R 4.3.1) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.3.0) ## jsonlite 1.8.7 2023-06-29 [1] CRAN (R 4.3.1) ## knitr 1.44 2023-09-11 [1] CRAN (R 4.3.1) ## later 1.3.1 2023-05-02 [1] CRAN (R 4.3.1) ## lifecycle 1.0.3 2022-10-07 [1] CRAN (R 4.3.0) ## magrittr 2.0.3 2022-03-30 [1] CRAN (R 4.3.0) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.3.0) ## mime 0.12 2021-09-28 [1] CRAN (R 4.3.0) ## miniUI 0.1.1.1 2018-05-18 [1] CRAN (R 4.3.1) ## pkgbuild 1.4.2 2023-06-26 [1] CRAN (R 4.3.1) ## pkgload 1.3.2.1 2023-07-08 [1] CRAN (R 4.3.1) ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.3.0) ## processx 3.8.1 2023-04-18 [1] CRAN (R 4.3.0) ## profvis 0.3.8 2023-05-02 [1] CRAN (R 4.3.1) ## promises 1.2.1 2023-08-10 [1] CRAN (R 4.3.1) ## ps 1.7.5 2023-04-18 [1] CRAN (R 4.3.0) ## purrr 1.0.1 2023-01-10 [1] CRAN (R 4.3.0) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.3.0) ## Rcpp 1.0.10 2023-01-22 [1] CRAN (R 4.3.0) ## remotes 2.4.2.1 2023-07-18 [1] CRAN (R 4.3.1) ## rlang 1.1.1 2023-04-28 [1] CRAN (R 4.3.0) ## rmarkdown 2.25 2023-09-18 [1] CRAN (R 4.3.1) ## rstudioapi 0.15.0 2023-07-07 [1] CRAN (R 4.3.1) ## sass 0.4.7 2023-07-15 [1] CRAN (R 4.3.1) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.3.1) ## shiny 1.7.5 2023-08-12 [1] CRAN (R 4.3.1) ## stringi 1.7.12 2023-01-11 [1] CRAN (R 4.3.0) ## stringr 1.5.0 2022-12-02 [1] CRAN (R 4.3.0) ## urlchecker 1.0.1 2021-11-30 [1] CRAN (R 4.3.1) ## usethis 2.2.2 2023-07-06 [1] CRAN (R 4.3.1) ## vctrs 0.6.2 2023-04-19 [1] CRAN (R 4.3.0) ## xfun 0.39 2023-04-20 [1] CRAN (R 4.3.0) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.3.1) ## yaml 2.3.7 2023-01-23 [1] CRAN (R 4.3.0) ## ## [1] D:/R-4.3.0/library ## ## ───────────────────────────────────────── 2.5 錯誤訊息 通常一開始學習很容易碰到執行程式時出現錯誤訊息，此時最快速的解決方法就是將遇到的錯誤訊息，「複製貼上」到google去搜尋，通常可以快速尋找到解決方案。 常見的錯誤訊息如下(參考): Message：有可能的錯誤通知，程式會繼續執行 Warning：有錯誤，但是不會影響太多，程式會繼續執行 Error：有錯，而且無法繼續執行程式 Condition：可能會發生的情況 "],["基礎篇_r語言的基礎概念.html", "Chapter 3 基礎篇_R語言的基礎概念 3.1 物件基礎操作 3.2 資料型態 3.3 基本運算 3.4 資料結構 3.5 簡單條件判斷式 3.6 管道控制pipe", " Chapter 3 基礎篇_R語言的基礎概念 3.1 物件基礎操作 R語言是以「物件導向」為主的程式語言，可以簡單想成在R語言當中，每一個東西都可以視為一個物件(object)，或著可以暫時先將物件想像成「資料」，這樣的資料內容可以是由一個或多個文字、數字或其他形式所組成的。 接著我們會介紹，在R語言當中可以根據創建出來的物件進行各種操作，像是指派、命名或數學運算，而物件也可能是由不同的結構所組成，也有可能會儲存成不同的形態。 3.1.1 指派（assignment）： 我們可以簡單的將指派理解為一種「變項的設定」，也就是將不管是一個或多個物件視為某一個「變項的內容」，而指派就是將這些物件(組合成的變項內容)指派(設定)一個「變項(物件)名稱」。 「變項的設定」可以更簡單理解為，我們建立了一個新變項或去更改既有變項 而若是要將資料儲存至一個代號（變項）內，也就是做「變項的設定」 可以用”&lt;-” 或”=“，但使用”&lt;-“好過”=“，另外也可以換個方向指派”-&gt;“，但通常由左至右較易閱讀因此較少使用。 (「&lt;-」的 Windows快捷鍵: 「Alt+-」) 若我們沒有指派成為某個變項，那麼這個物件會直接的顯示在視窗 以下範例單獨顯示「24」 24 ## [1] 24 若是我們有指派物件，那麼這個變項就會暫存在R語言的環境當中，可隨時拿來使用 以下範例將「24」作為一個物件，並指派為「a」(變項名稱)。 我們可以用「代數」的方式來做簡單的理解， a &lt;- 24 就是告訴R語言，現在我要用a來代表24 # 將24存在「a」這個代號當中 a &lt;- 24 a = 24 24 -&gt; a # 輸出a為24 a ## [1] 24 若有指派a，則旁邊Environment -&gt; Global Environment -&gt; Values 就會出現a 一個已經被指派(設定)的變項，也可以當作另一個變項的內容， 以下範例將「a - 10」作為一個物件，並指派為「b」， a &lt;- 24 就是告訴R語言，現在我要用a來代表24 b &lt;- a - 24 因為a是代表24，因此「b」就會是24-10 = 14。 # 將a-10存在「b」這個代號當中(a 需要先被指派) a &lt;- 24 b &lt;- a - 10 ## or a - 10 -&gt; b # 輸出b:若a已經代表24，那麼b就會等於24-10=14 b ## [1] 14 另外如果不同的物件都指派到相同的變項名稱，那較後面指派會取代較早指派的物件， 以下範例先將「2」作為一個物件，並指派為「c」，再將「4」作為一個物件，並同樣指派為「c」，此時c所代表的是後面所指派的4。 # 先將2存在「c」這個代號當中 c &lt;- 2 # 輸出c為2 c ## [1] 2 # 再將4同樣存在「c」這個代號當中 c &lt;- 4 # 輸出c為4 c ## [1] 4 3.1.2 查詢顯示物件與刪除物件 在我們已經指派了某個變項後，此時他會暫存R語言的環境當中， 在此我們先重新指派a、b、c(注意，相同變項名稱，後續指派會取代前面指派的)。 a &lt;- 24 b &lt;- a - 10 c &lt;- 4 指派a、b、c 若是我們想要查看/輸出「a」當中的內容，可以直接打物件名稱或著用print()函數輸出。 (物件名稱與變項名稱兩者通用，在本講義中會交替使用) # 直接打物件名稱 a ## [1] 24 # 用print()函數將物件內容輸出 print(a) ## [1] 24 若是我們想要移除整個變項「a」，可以用rm()函數移除。 # 用rm()函數移除物件 rm(a) 移除a 3.1.3 命名 上述的a、b、c都是我們自己給予的一個簡單的變項名稱，在R語言當中對於變項名稱也有需要遵守的命名規則，最需要注意的是在R語言當中英文字母的大小寫是有區分的，另外也針對開頭的強制規定。 有效的命名 以字母(大小寫都可)、數字、逗點(.)、下底線(_)開頭 若以.點開頭，後面不能接數字 而實際在操作上，通常會有兩種常見的命名方式，若是英文單詞太長也可以進行適當縮寫 常見命名規則 1.以小寫字母開頭的一個單詞(常見多以小寫字母開頭) 2.若為兩個單詞組成，以小寫字母開頭的一個單詞，後面的單詞第一個字母大寫 3.若為兩個單詞組成，以小寫字母開頭的一個單詞，後面接_，再接著第二個單詞且第一個字母小寫 # 1 income &lt;- 50000 ## 縮寫 inc &lt;- 50000 # 2 incomeLevel &lt;- c(&quot;low&quot;, &quot;middle&quot;, &quot;high&quot;) # 3 income_level &lt;- c(&quot;low&quot;, &quot;middle&quot;, &quot;high&quot;) 3.2 資料型態 不同的物件都會有各自的資料型態，在R語言當中常用的資料型態包括數值 (numeric)、字串 (character)、布林變數 (logic)以及日期 (Date)等。 使用函式class()可以檢視資料型態。 3.2.1 數字(numeric): numeric包括整數integer（沒有小數點）與浮點數double（有小數點）的數值 numeric1 &lt;- 3.14 ## numeric class(numeric1) ## [1] &quot;numeric&quot; numeric2 &lt;- 3 ## numeric class(numeric2) ## [1] &quot;numeric&quot; 若是在整是數字後面有加上L就會被認為是純粹的整數，型態會顯示integer numeric3 &lt;- 15L ## integer class(numeric3) ## [1] &quot;integer&quot; 另外還有複數的數值型態，顯示為complex complex1 = 2 + 4i ## complex class(complex1) ## [1] &quot;complex&quot; 3.2.2 字串(character): 用雙引號”框起的文字會被儲存為字串格式，若在數字前後加上雙引號，數字也會被儲存為文字形式，無法進行數值的加減乘除等運算。 character1 &lt;- &quot;Apple&quot; class(character1) ## [1] &quot;character&quot; character2 &lt;- &quot;1&quot; class(character2) ## [1] &quot;character&quot; 3.2.3 邏輯(logical): 邏輯型或布林型 (true or false)，用於邏輯判斷，可使用TRUE或T代表真，FALSE或F代表假。 logical1 &lt;- TRUE class(logical1) ## [1] &quot;logical&quot; logical2 &lt;- FALSE class(logical2) ## [1] &quot;logical&quot; 有時 T 與 F可以分別代表1、0整數。 TRUE + 2 ## 等於 1 + 2 ## [1] 3 FALSE + 2 ## 等於 0 + 2 ## [1] 2 3.2.4 日期(date): 使用 lubridate 套件可更好呈現，其應用範圍很廣在此不多做介紹 library(lubridate) time &lt;- ymd(&quot;2012/3/3&quot;) class(time) 3.3 基本運算 以下介紹簡單的運算方式，另外還有很多其他函數可以做基礎或進階的數學換算或運算，若有需要使用到可自行查找 3.3.1 數學基本運算 num1 &lt;- 1 num2 &lt;- 10 # 加 + num1+num2 ## 1+10 = 11 # 減 - num1-num2 ## 1-10 = -9 # 乘 * num1*num2 ## 1*10 = 10 # 除 / num1/num2 ## 1/10 = 0.1 # 餘數 %% 10%%3 ## 10除以3後所得餘數 # 次方 ^ 10^2 ## 10的2次方 = 100 3.3.2 邏輯運算 num1 &lt;- 1 num2 &lt;- 10 # 大於 &gt; num1 &gt; num2 ## num1是否大於num2 -&gt; FALSE # 小於 &lt; num1 &lt; num2 ## num1是否小於num2 -&gt; TRUE # 等於 ==，為了不與變數設定混淆，判斷兩變數是否相等，要用雙等號 num1 == num2 ## num1是否等於num2 -&gt; FALSE # 大於等於 &gt;= num1 &gt;= num2 ## num1是否大於等於num2 -&gt; FALSE # 小於等於 &lt;= num1 &lt;= num2 ## num1是否小於等於num2 -&gt; TRUE # 且 &amp; TRUE &amp; TRUE ## TRUE num1 == 1 &amp; num2 == 10 TRUE &amp; FALSE ## FALSE num1 == 1 &amp; num2 == 11 # 或 | TRUE | TRUE ## TRUE num1 == 1 | num2 == 10 TRUE | FALSE ## TRUE num1 == 1 | num2 == 11 # 反向布林變數! !TRUE ## 不等於TRUE 所以是 FALSE num1 != 1 3.4 資料結構 前述講到R語言當中物件有各自的資料型態，而一個物件本身是如何被「儲存」，就是以不同「資料結構」的方式，在R語言當中有五大類的資料結構形式，分別是向量(vectors)、清單(list)、矩陣(matrices)、陣列(array)、資料架構(data frames)。 3.4.1 向量(vectors): 向量(vectors)是物件最「基礎」的資料結構，且只包含單維、單一類型的資料。 concatenate(堆疊): 以c(...)將「相同類型」值以「逗點」分隔而形成的向量 # 同樣是數字 c(1, 2 ,3) c(c(1, 2), c(3, 4)) ## 等於c(1, 2, 3, 4) # 同樣是文字 c(&quot;apple&quot;, &quot;banana&quot;) # 若文字中混數字會被自動當作文字 c(&quot;apple&quot;, &quot;banana&quot;, 5) ## 等於c(&quot;apple, banana&quot;, &quot;5&quot;) 3.4.2 因子(factor): 因子是由向量轉換而成，多用於表示「類別資料(categorical data)｣， 例如有三種收入等級的類別，分別是低收入、中等收入、高收入， 簡單的使用方法為factor(資料向量,levels=類別次序)，levels參數可設定各類別的次序， 另外還有其他的參數可以進行設定。 以下範例將income_1設定為由不同的四個收入所組成的向量，此時資料的格式是顯示為文字(character)。 income_1 &lt;- c(&quot;低收入&quot;, &quot;中等收入&quot;, &quot;高收入&quot;, &quot;低收入&quot;) class(income_1) ## [1] &quot;character&quot; 若查看次數分配會發現順序是中等收入-&gt;低收入-&gt;高收入。 table(income_1) ## 查看次數分配 ## income_1 ## 中等收入 低收入 高收入 ## 1 2 1 接著我們將income_1轉成類別變項，而類別的順序是設定為低收入-&gt;中等收入-&gt;高收入，此時資料的格式也會轉變為為因子(factor)。 # 原本是文字資料，設定類別 fac_1 &lt;- factor(income_1, levels = c(&quot;低收入&quot;, &quot;中等收入&quot;, &quot;高收入&quot;)) class(fac_1) ## [1] &quot;factor&quot; 若查看次數分配會發現順序改成我們設定的低收入-&gt;中等收入-&gt;高收入。 table(fac_1) ## 查看次數分配 ## fac_1 ## 低收入 中等收入 高收入 ## 2 1 1 在統計模型當中使用類別資料時，有時會需要針對類別資料設定參考組別，而若是沒有特別設定，R語言會自動把最低順序的當作參考組(以上述為例:低收入)，這時我們可以使用relevel()改變參考組別(改成中等收入為參考)。 relevel(fac_1, ref = &quot;中等收入&quot;) ## [1] 低收入 中等收入 高收入 低收入 ## Levels: 中等收入 低收入 高收入 數字資料也是類似，可以再另外設定標籤 # 原本是數字資料，設定類別 fac_2 &lt;- factor(c(1, 2, 3, 1, 3), levels = c(1, 2, 3), labels = c(&quot;低收入&quot;, &quot;中等收入&quot;, &quot;高收入&quot;)) table(fac_2) ## 查看次數分配 ## fac_2 ## 低收入 中等收入 高收入 ## 2 1 2 若是資料多了一個數字(範例是4)沒有被設定成類別，那麼轉成factor時被自動當成缺失值 (R語言當中，缺失值通常以「NA」作為標記) fac_3 &lt;- factor(c(1, 2, 3, 1, 3, 4), levels = c(1, 2, 3), labels = c(&quot;低收入&quot;, &quot;中等收入&quot;, &quot;高收入&quot;)) table(fac_3, exclude = NULL) ## 查看次數分配 ## fac_3 ## 低收入 中等收入 高收入 &lt;NA&gt; ## 2 1 2 1 3.4.3 列表(list): 列表(list)是一種較複雜的向量模式，可以包含向量、矩陣、不同的清單，可以包含「不同的資料型態」，通常統計跑完後，結果會儲存在列表之中。 num_list &lt;- c(3, 4, 5) char_list &lt;- c(&quot;a&quot;, &quot;b&quot;) logic_list &lt;- c(TRUE, TRUE, FALSE) out_list_1 &lt;- list(num_list, char_list, logic_list, 3) ## or out_list_2 &lt;- list( c(3, 4, 5), c(&quot;a&quot;, &quot;b&quot;), c(TRUE, TRUE, FALSE), 3 ) ## or 給予名稱 out_list_3 &lt;- list( num_list = c(3, 4, 5), char_list = c(&quot;a&quot;, &quot;b&quot;), logic_list = c(TRUE, TRUE, FALSE), 3 ) 點開out_list_3 可以看到詳細out_list_3的架構 另外列表(list)也可以包含其他列表(list)。 以剛剛創建的out_list_3為例，我們還可以再套上一層list。 out_list_4 &lt;- list( out_list_3, gender = c(&quot;male&quot;, &quot;female&quot;) ) 可以看到詳細out_list_4的架構 3.4.4 矩陣(matrices): 二維的資料 mat_1 &lt;- matrix(1:4, nrow = 2, ncol = 2) mat_2 &lt;- matrix(1:9, nrow = 3, ncol = 3) 3.4.5 陣列(array): 多維度的資料 vec_1 &lt;- c(1, 2, 4) vec_2 &lt;- c(15, 17, 27, 3, 10, 11) array1 &lt;- array(c(vec_1, vec_2), dim = c(3, 3, 2)) 3.4.6 資料框架(data frame)： 資料框架是列表(list)的一種特殊的形式，一樣可以包含不同的資料型態，但不同的是每個變數的觀察值都需要有相同數量(長度)的資料，更類似一種矩陣形式，而這樣的形態也更像是我們使用的其他套裝統計軟體（如excel, spss, stata）中資料儲存的方式，每一行(欄)（Column）儲存不同的資料、每一列（Row）代表不同的觀察值 num_list &lt;- c(3, 4, 5) char_list &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) logic_list &lt;- c(TRUE, FALSE, TRUE) # 使用data.frame()來創建新的資料框 data_frame &lt;- data.frame(num_list, char_list, logic_list) # 或是將list 轉成data.frame data_list &lt;- list( num_list = num_list, char_list = char_list, logic_list = logic_list ) data_list &lt;- as.data.frame(data_list) 點開data_list 可以看到一個簡單的資料框架 3.4.7 查詢資料型態或結構 Type: 是查看電腦如何儲存資料，物件的基本型態 Class: 是查看物件的類別(螢幕顯示的型態)，及能對它進行的操作所做的分類 # type typeof(c(&quot;John&quot;, &quot;Mary&quot;)) ## &quot;character&quot; typeof(c(2, 3.1412)) ## &quot;double&quot; typeof(c(TRUE, TRUE, F)) ## &quot;logical&quot; # class class(c(&quot;John&quot;, &quot;Mary&quot;)) ## &quot;character&quot; class(c(2, 3.1412)) ## &quot;numeric&quot; class(c(TRUE, TRUE, F)) ## &quot;logical&quot; 3.4.8 轉換資料型態或結構 使用as.targetClass將值轉換為targetClass類。 as.numeric()將值轉換為數字類 as.character()將值轉換為字串類 其他轉換…… num_t1 &lt;- c(0.1, 2, 4) char_t1 &lt;- c(&quot;0.1&quot;, &quot;2&quot;, &quot;4&quot;) num_t2 &lt;- as.character(num_t1) char_t2 &lt;- as.numeric(char_t1) class(num_t1) ## &quot;numeric&quot; class(num_t2) ## &quot;character&quot; class(char_t1) ## &quot;character&quot; class(char_t2) ## &quot;numeric&quot; 3.5 簡單條件判斷式 3.5.1 if-else敘述 邏輯判斷: if-else敘述 若if後所接邏輯判斷為真(TRUE)，就會執行if下方之程式碼，若為偽(FALSE)，則執行else下方之程式碼，若程式中沒有else片段，則不執行任何程式碼。 以下範例，若考試分數大於等於60分，則印出及格字樣，小於60分則印出不及格字樣。 # 先隨便設定一個考試分數 score1 &lt;- 59 # 執行判斷 if(score1 &gt;= 60){ ## 若考試分數大於等於60分 print(&quot;及格&quot;) ## 及格 } 上述只有設定考試分數大於等於60分並沒有設定其他的條件，因此小於60分不會有輸出結果，此時我們加上一個else的判斷，如果「非上述的條件(考試分數大於等於60分)」，那麼就輸出不及格。 if(score1 &gt;= 60){ ## 若考試分數大於等於60分 print(&quot;及格&quot;) ## 及格 }else{ print(&quot;不及格&quot;) ## 否則就是不及格 } ## [1] &quot;不及格&quot; 多重邏輯判斷: if-else if-else 同時若有多個條件也可以開頭用if中間設定多個else if，最後結果用else。 score2 &lt;- 39 if(score2 &gt;= 90){ print(&quot;優秀&quot;) }else if(score2 &gt;= 60){ print(&quot;及格&quot;) }else if(score2 &gt;= 40){ print(&quot;不及格&quot;) }else{ print(&quot;死當&quot;) } ## [1] &quot;死當&quot; 邏輯判斷簡化: ifelse ifelse()函數可用最短的方式取代if-else敘述(類似excel當中的if函數)， 使用方法為ifelse(邏輯判斷, 判斷為真要執行的程式碼, 判斷為偽要執行的程式碼) score3 &lt;- 90 ifelse(score3 &gt;= 60, &quot;及格&quot;, &quot;不及格&quot;) ## [1] &quot;及格&quot; ifelse(score3 &gt;= 90, &quot;優秀&quot;, ifelse(score3 &gt;= 60, &quot;及格&quot;, &quot;不及格&quot;)) ## [1] &quot;優秀&quot; 3.6 管道控制pipe 在語法操作上，很常需要對於同一個變項進行重複操作，在此magrittr套件提供了一些可以讓程式更容易查看、理解的語法，而在R版本4.1.0後也有提後一個內建的符號來進行，以下對此作簡單介紹，後續資料處理的章節會較常使用到 參考1、參考2 3.6.1 |&gt; &amp; %&gt;% |&gt;為內建的連結符號，目的是要將符號左側的變項連結(放入使用)到符號右邊的函數 %&gt;%是magrittr套件中的其中一個管道，其使用方法大致與|&gt;一模一樣 首先先載入magrittr套件 library(magrittr) 假設此時有個向量x，內容為數值1-4，另外有個函數sum()(用來加總數值)， 而我們想在函數當中放入x，可以有以下方法1和方法2，方法1是直接放入函數內，方法2是使用管道控制符號，可以在讀程式時更直觀的看到x被用於f()函數 x &lt;- c(1, 2, 3, 4) ## 方法1 sum(x) ## [1] 10 ## 方法2 x |&gt; sum() # 視為將x用於(放入)f()函數當中 ## [1] 10 x %&gt;% sum() ## [1] 10 sum()函數也可以同時放入兩個參數，我們想在函數當中放入向量x和5 x &lt;- c(1, 2, 3, 4) ## 方法1 sum(x, 5) ## [1] 15 ## 方法2 x |&gt; sum(5) ## [1] 15 x %&gt;% sum(5) ## [1] 15 另外管道也可以連續使用， 若想先加總向量x再取平方根 x &lt;- c(1, 2, 3, 4) x |&gt; sum() |&gt; sqrt() ## [1] 3.162278 x %&gt;% sum() %&gt;% sqrt() ## [1] 3.162278 ## 等於 sqrt(sum(x)) ## [1] 3.162278 3.6.2 其他管道控制 magrittr套件中也包含其他讓程式更容易理解的管道，可以做為參考就好 %T%是臨時想查看f(x)但最後卻想只返回x值就可以使用x %T% f()，如此並不會改變x的值 %&lt;&gt;%如同%&gt;%，但是將原先x的值變為f(x)，使用x %&gt;% f()，可以將x變成f(x) … "],["基礎篇_元素的基礎操作.html", "Chapter 4 基礎篇_元素的基礎操作 4.1 值與元素 4.2 元素位置 4.3 檢索/取出元素 4.4 替換元素 4.5 新增元素 4.6 刪除元素 4.7 判斷位置的其他方法 4.8 元素命名", " Chapter 4 基礎篇_元素的基礎操作 4.1 值與元素 上一章節說明了一些基礎概念，而在進行一下部分的操作時，還需要釐清一下「值(values)」與「元素(element values)」的概念， 我們先看一個範例: value1 &lt;- &quot;apple&quot; value2 &lt;- 1 value3 &lt;- TRUE value4 &lt;- c(1, 2, 3) value5 &lt;- list(&quot;apple&quot;, TRUE) value6 &lt;- list(&quot;apple&quot;, 1, list(&quot;banana&quot;, 2)) 上面的程式碼中，每一行都可以當作是一個值，apple、1、TRUE，分別屬於單一的文字、數字、邏輯，都視為「一個值」，而由c(1, 2, 3)組成的向量、由list(\"apple\", TRUE)組成的列表、由list(\"apple\", 1, list(\"banana\", 2))所組成列表(當中單含另一個列表)也同樣都視為「一個值」。 若是像第二種是由向量或列表所組成的(value4、value5、value6)，他們內部也會包含著值，這些被包含的值就會稱之為「元素」 也就是說像是剛剛的由c(1, 2, 3)組成的向量，他本身是一個值，且其中包含了三個元素，分別是1、2、3 value4 &lt;- c(1, 2, 3) value4_element1 &lt;- 1 ## 第一個元素 value4_element2 &lt;- 2 ## 第二個元素 value4_element3 &lt;- 3 ## 第三個元素 可以簡單的想像，每一個元素是由,或著;所隔開的，並且不能在同一個向量或列表內。 例如上述的value6，本身是一個列表，其中還包含列外一個列表，但value6中的元素就只有三個，分別是apple、1、list(\"banana\", 2)，而banana、2，則是list(\"banana\", 2)中的元素 value6 &lt;- list(&quot;apple&quot;, 1, list(&quot;banana&quot;, 2)) value6_element1 &lt;- &quot;apple&quot; ## 第一個元素 value6_element2 &lt;- 1 ## 第二個元素 value6_element3 &lt;- list(&quot;banana&quot;, 2) ## 第三個元素 4.2 元素位置 剛剛了解到值和元素的不同，接著我們可以進一步的對「元素」開始進行各種操作， 舉例來說，假設今天有一份資料，我們想在R語言對這份的資料的某一個數據進行更動，且這個數據是包含在某個向量當中，因此這個數據就是當中的元素，這時如果我們想要只單獨查看這個元素，或是想要更改這個元素，就位需要對其進行一些判斷與操作。 如何進行這些操作的最重要關鍵就是需要先判斷「元素的位置(Position)」，在我們能知道個元素是在哪個位置時，就能夠很輕易地去進一步操作。 元素的位置: 對於由,或著;隔開所構成的元素，每個元素都有一個位置，而個位置是由1、2、3…來排序(由1開頭)，1為第一個位置、2為第二個位置，以此類推。 例如上述的value6，apple在第一個位置、1在第二個位置、list(\"banana\", 2)在第三個位置 value6 &lt;- list(&quot;apple&quot;, 1, list(&quot;banana&quot;, 2)) value6_position1 &lt;- &quot;apple&quot; ## 第一個位置 value6_position2 &lt;- 1 ## 第二個位置 value6_position3 &lt;- list(&quot;banana&quot;, 2) ## 第三個位置 另外位置是可以連接起來的， 例如上述的value6，list(\"banana\", 2)在value6的第三個位置，但是其中的banana、2卻是在list(\"banana\", 2)中的第一、二個位置。 也就是我們可以將banana視為是在value6的「第三 -&gt; 一」個位置，這部份我們等等會在解釋。 4.3 檢索/取出元素 檢索元素時，第一步就是必須知道該元素的位置，而透過這個位置我們就可以檢索/取出該元素。 4.3.1 檢索/取出vector中的元素 假設今天有一個vector_choose的資料，其中包含兩個文字型態的元素(apple,banana)。 vector_choose &lt;- c(&quot;apple&quot;, &quot;banana&quot;) 接著我們可以使用length()函數，來查看這個物件多少位置可選(該物件的長度)， 以下範例，vector_choose長度總共為3 length(vector_choose) ## [1] 2 ## [1] 2 這時我們可以知道vector_choose長度總共為2，且裡面的元素是(apple,banana)，這個資訊我們也可以從旁邊的R語言暫存環境中看到，同時也可以知道apple在第一個位置、banana在第二個位置。 vector_choose的資訊 最後就可以開始選取vector_choose中的元素， 假設我們想取出apple，可以使用兩個中括號[[]]加上已知apple的位置來取出。 vector_choose &lt;- c(&quot;apple&quot;, &quot;banana&quot;) # 取出apple vector_choose[[1]] ## [1] &quot;apple&quot; ## [1] &quot;apple&quot; 也可以用負向的表示取出，此方法是刪除banana的位置，因此只留下apple。 vector_choose[[-2]] ## [1] &quot;apple&quot; ## [1] &quot;apple&quot; 最後也可以用布林變數(TRUE、FALSE)來取出，apple的位置是TRUE、banana的位置是FALSE。 vector_choose[c(T, F)] ## [1] &quot;apple&quot; ## [1] &quot;apple&quot; 4.3.2 取出list中的元素 若要選取list中的元素，方法和前面取出向量中的元素類似，但不同的是list可能有更複雜的位置結構，但同樣能判斷出元素位置在哪就能進行操作。 以下範例為以台北市和新北市今日氣溫組成的list加上台北市和新北市明日氣溫組成的list，兩個list合併成一個名稱為weather的list 我們可以先用print()函數將weather的架構直接輸出 weather &lt;- list( today = list( list(&quot;台北市&quot;, c(highest_temp = 25)), list(&quot;新北市&quot;, c(highest_temp = 24)) ), tomorrow = list( list(&quot;台北市&quot;, c(highest_temp = 30)), list(&quot;新北市&quot;, c(highest_temp = 28)) ) ) # 查看整個list的架構或如下圖方式點選 print(weather) ## $today ## $today[[1]] ## $today[[1]][[1]] ## [1] &quot;台北市&quot; ## ## $today[[1]][[2]] ## highest_temp ## 25 ## ## ## $today[[2]] ## $today[[2]][[1]] ## [1] &quot;新北市&quot; ## ## $today[[2]][[2]] ## highest_temp ## 24 ## ## ## ## $tomorrow ## $tomorrow[[1]] ## $tomorrow[[1]][[1]] ## [1] &quot;台北市&quot; ## ## $tomorrow[[1]][[2]] ## highest_temp ## 30 ## ## ## $tomorrow[[2]] ## $tomorrow[[2]][[1]] ## [1] &quot;新北市&quot; ## ## $tomorrow[[2]][[2]] ## highest_temp ## 28 若想較簡易得知list中元素位置，可以直接點選 將weather架構詳細展開 點選想要知道的元素(右邊按鈕) 在Console可以看到位置的資訊，直接複製貼上 若我們想取出weather當中today裡面的「台北市」，按照上面的方法可以得知位置是: weather[[&quot;today&quot;]][[1]][[1]] ## [1] &quot;台北市&quot; 但除了上述方法，也有其他符號可以代替，在有對list裡面的元素命名時，用$也可以取出元素 weather$today[[1]][[1]] ## [1] &quot;台北市&quot; ## [1] &quot;台北市&quot; 4.3.3 [[]]和[] 差異 在選取元素位置時，有時可以看到選取資料時有[[]]和[]兩種，在此我們可以做個簡單比較: taipei1是使用[[]] # 比較[[]] 和 [] 差別 taipei1 &lt;- weather$today[[1]][[1]] taipei1 ## [1] &quot;台北市&quot; ## [1] &quot;台北市&quot; taipei2是使用[] taipei2 &lt;- weather$today[[1]][1] taipei2 ## [[1]] [1] &quot;台北市&quot; ## [[1]] ## [1] &quot;台北市&quot; 在此我們可以看到使用[]還保留原來的結構，但是使用[[]]就會當純取出「台北市」這個元素 [[]]: 拿出某個物件值。weather$today[[1]][[1]將weather中today裡的台北市物件值拿出來，因此只留下單純的值。 []: 留下某個物件值。weather$today[[1]][1]只留下weather中today裡的台北市，因此原先資料結構和名稱仍會留下。 taipei2還是list的結構，但taipei1是單純的Value 以下可以練習看看: 取出tomorrow當中新北市的highest_temp值(25) 並保留highest_temp的名稱 weather$tomorrow[[2]][[2]] ## highest_temp 28 ## highest_temp ## 28 weather$tomorrow[[2]][[2]][1] ## highest_temp 28 ## highest_temp ## 28 取出tomorrow當中新北市的highest_temp值(25) 並捨棄highest_temp的名稱 weather[[&quot;tomorrow&quot;]][[2]][[2]][[&quot;highest_temp&quot;]] ## [1] 28 ## [1] 28 ## or weather$tomorrow[[2]][[2]][[1]] ## [1] 28 ## [1] 28 4.3.4 取出data frame中的元素 若想取出data frame中的元素，概念仍然根前面兩個相同，而不一樣的地方在於data frames是由「行/列」所組成，因此在考慮位置時也需要考慮所處的「行/列」 首先我們先載入R內建的資料檔案iris(檔案中包括鳶尾花的一些特徵)，載入後一樣可以先從旁邊直接點開瀏覽一下檔案 #取得R內建資料 data(iris) # 查看欄位名稱 names(iris) ## [1] &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; &quot;Species&quot; 點開直接瀏覽iris檔資料檔 此時想取出第一列(row)第二行(欄)(column)的數值 (直行橫列) iris[1, 2] ## [row, column] ## [1] 3.5 在iris檔資料檔中確認第一列第二行 若只想取出第一、三行的資料 iris_c1_1 &lt;- iris[, c(1, 3)] ## or iris_c1_2 &lt;- iris[, c(&quot;Sepal.Length&quot;, &quot;Petal.Length&quot;)] ## 用欄位名稱選取 ## or c13 &lt;-c (&quot;Sepal.Length&quot;, &quot;Petal.Length&quot;) iris_c1_3 &lt;- iris[, c13] ## or iris_c1_4 &lt;- iris[, c(T, F, T, F, F)] ## 用布林變數選取 # 若只想取出一行，除了上述方法也可以用「$」選取 iris_c1_5 &lt;- iris$Sepal.Length ## 用欄位名稱選取 取出第一、三行的資料 4.4 替換元素 若要替換元素，我們可以接續上述的檢索/取出元素，在我們檢索出某一個元素值時，將想要的元素重新指派到原先的位置後，就能夠替換了。 也就是首先我們還是必須先知道要替換元素的位置， 1. 找出需要替換元素的位置 2. 將要替換的值指派到需要替換元素的位置 以下範例，vector_replace1是由apple、banana、cat組成，若想在vector_replace1中的banana替換成二: 先創建vector_replace1，並判斷位置 vector_replace1 &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) length(vector_replace1) ## [1] 3 找出需要替換元素的位置 可以知道vector_replace1中的banana是在第二個位置 vector_replace1[[2]] ## 存在&quot;banana&quot; ## [1] &quot;banana&quot; 將要替換的值指派到需要替換元素的位置 因此若想在vector_replace1banana替換成二，需要將二指派到vector_replace1 的第二個位置 vector_replace1[[2]] &lt;- &quot;二&quot; vector_replace1 ## [1] &quot;apple&quot; &quot;二&quot; &quot;cat&quot; 另外我們也可以一次替換多個元素，但同樣也需要指定位置 vector_replace2 &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) vector_replace2[1:2] &lt;- c(&quot;一&quot;, &quot;二&quot;) ## 此時apple和banana會變成一、二 vector_replace2 ## [1] &quot;一&quot; &quot;二&quot; &quot;cat&quot; ## or vector_replace3 &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) vector_replace3[c(1, 3)] &lt;- c(&quot;一&quot;, &quot;三&quot;) ## 此時apple和cat會變成一、三 vector_replace3 ## [1] &quot;一&quot; &quot;banana&quot; &quot;三&quot; 其他list或data frame的替換也是類似相同概念 4.5 新增元素 若要新增元素、首先我們必須知道元素的位置，也就是上一章節詳細介紹元素的部分， 1. 找出不存在的位置 2. 將要新增的值指派到不存在元素的位置 以下範例，vector_add1是由apple、banana、cat組成，若想在vector_add中的cat後面新增一個四: 先創建vector_add1，並判斷位置 vector_add1 &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) length(vector_add1) ## [1] 3 找出不存在的位置 vector_add1[[3]] # 存在&quot;cat&quot; vector_add1[[4]] # 不存在元素(會出現Error) 將要新增的值指派到不存在元素的位置 剛剛已知第四個位置是不存在的，因此若想在cat後面新增一個四，需要將「四」直接指派到不存在的那個位置 vector_add1[[4]] &lt;- &quot;四&quot; vector_add1 ## [1] &quot;apple&quot; &quot;banana&quot; &quot;cat&quot; &quot;四&quot; 原先vector_add1是只有三個位置，上面範例是新增到第四個位置，若是直接新增到第五個位置，那麼第四個位置會顯示成NA vector_add1 &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) vector_add1[[5]] &lt;- &quot;四&quot; vector_add1 ## [1] &quot;apple&quot; &quot;banana&quot; &quot;cat&quot; NA &quot;四&quot; 另外我們也可以一次新增多個元素，但同樣也需要指定位置 # 也可以新增多個元素 vector_add2 &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) vector_add2[4:6] &lt;- c(&quot;四&quot;, &quot;五&quot;, &quot;六&quot;) vector_add2 ## or vector_add3 &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) vector_add3[c(4, 6, 7)] &lt;- c(&quot;四&quot;, &quot;六&quot;, &quot;七&quot;) # 此時第5個位置會變成NA vector_add3 也可以同時新增和替換元素 vector_replace3 &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) vector_replace3[c(1, 3, 4)] &lt;- c(&quot;1&quot;, &quot;3&quot;, &quot;4&quot;) vector_replace3 ## [1] &quot;1&quot; &quot;banana&quot; &quot;3&quot; &quot;4&quot; 其他list或data frame的新增也是類似相同概念 4.6 刪除元素 若要刪除元素有兩種方式， 同樣先找出需要刪除元素的位置 第一種: 只取出需要的元素，再指派到原先的物件(沒有取出的，即是刪去) 第二種: 取出不需要(要刪除)的元素，用-指派到原先的物件(回存-即是刪去)，但這個只能用在向量不能使用在列表 例如，若想將範例vector_delete中原先的\"apple\"和\"cat\"刪除: 以下範例，vector_delete1是由apple、banana、cat組成，若想在vector_delete1中的\"apple\"和\"cat\"刪除: 先創建vector_delete1，並判斷位置 vector_delete1 &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) length(vector_delete1) ## [1] 3 1.找出需要刪除元素的位置 vector_delete1[c(1, 3)] ## apple和cat ## [1] &quot;apple&quot; &quot;cat&quot; 2_1. 取出需要的元素banana再指派到原先的物件(vector_delete1)，沒有取出的，即是刪去 vector_delete1 &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) vector_delete1 &lt;- vector_delete1[[2]] vector_delete1 ## 只剩下banana，apple和cat則被刪除 ## [1] &quot;banana&quot; 2_2. 取出不需要(要刪除)的元素(apple和cat)，用-指派到原先的物件 vector_delete1 &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) vector_delete1 &lt;- vector_delete1[-c(1, 3)] vector_delete1 ## [1] &quot;banana&quot; 另外list的形式是用NULL來刪除，類似替換的概念，但替換成NULL(空的) 例如，若想將範例weather2中的\"台北市\"刪除: 先創建weather2查看架構 weather2 &lt;- list( today = list( &quot;台北市&quot;, c(highest_temp = 25) ), &quot;新北市&quot; ) print(weather2) ## $today ## $today[[1]] ## [1] &quot;台北市&quot; ## ## $today[[2]] ## highest_temp ## 25 ## ## ## [[2]] ## [1] &quot;新北市&quot; 找出需要刪除元素(台北市)的位置 weather2$today[[1]] ## [1] &quot;台北市&quot; 用「NULL」來替換(刪除) weather2$today[[1]] &lt;- NULL weather2 ## $today ## $today[[1]] ## highest_temp ## 25 ## ## ## [[2]] ## [1] &quot;新北市&quot; 4.7 判斷位置的其他方法 在上述了解元素的操作後，我們還可以根據元素進行位置的判斷， 可以使用which()和%in% which()函數是進行()中的條件邏輯判斷，並返回位置 x %in% y 是針對左邊x是否包含右邊的y，並返回邏輯值 vector_which &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) which(vector_which == &quot;apple&quot;) ## 返回apple的位置1 ## [1] 1 which(vector_which != &quot;apple&quot;) ## 返回不是apple的位置2、3 ## [1] 2 3 which(c(T,F,T)) ## 返回c(T,F,T)中為TURE值的位置。 ## [1] 1 3 vector_which %in% &quot;apple&quot; ## 返回邏輯值，apple的位置為TURE，不是的為FALSE ## [1] TRUE FALSE FALSE 4.8 元素命名 若要對元素進行命名，需使用\"name\"=value， 在命名時只能夠使用=，不能使用&lt;- 另外在命名時，也可以使用`，如果是常規的命名，也可以都不加 或者可以使用setNames、names()相關函數 以向量為例，想對1、2、3分別命名為apple、banana、cat vector_name &lt;- c(1, 2, 3) vector_name ## [1] 1 2 3 方法1，使用”” vector_name1 &lt;- c(&quot;apple&quot; = 1 , &quot;banana&quot; = 2 , &quot;cat&quot; = 3) vector_name1 ## apple banana cat ## 1 2 3 方法2，使用` vector_name2 &lt;- c(`apple` = 1 , `banana` = 2 , `cat` = 3) vector_name2 ## apple banana cat ## 1 2 3 方法3，常規的命名，都不加 vector_name3 &lt;- c(apple = 1 , banana = 2 , cat = 3) vector_name3 ## apple banana cat ## 1 2 3 方法4，用setNames()函數 vector_name4 &lt;- setNames(c(1, 2, 3), c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;)) vector_name4 ## apple banana cat ## 1 2 3 方法5，用names()函數 vector_name5 &lt;- c(1, 2, 3) names(vector_name5) &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) vector_name5 ## apple banana cat ## 1 2 3 另外若元素有命名，前面的選取、新增等操作中，也可以用命名的文字來取代位置 vector_name &lt;- c(1, 2, 3) vector_name[[1]] ## [1] 1 vector_name1 &lt;- c(&quot;apple&quot; = 1 , &quot;banana&quot; = 2 , &quot;cat&quot; = 3) vector_name1[[&quot;apple&quot;]] ## [1] 1 "],["應用篇_資料讀取匯出合併與瀏覽.html", "Chapter 5 應用篇_資料讀取、匯出、合併與瀏覽 5.1 設定工作路徑 5.2 讀取資料 5.3 匯出資料 5.4 簡單資料合併 5.5 資料瀏覽", " Chapter 5 應用篇_資料讀取、匯出、合併與瀏覽 5.1 設定工作路徑 首先可以先設定放檔案路徑，(需要注意的是在路徑上平常多是使用\\，但在R中需要使用/) 設定好路徑之後，讀取或匯出資料就只需要寫檔案名稱，不用加上前面路徑，會直接存在設定路徑的資料夾中，若檔案需要放在另外位置，也只須在檔名前面加上需要存取的位置 可以對需要存放的資料夾按 右鍵-&gt;內容-&gt;位置或是右鍵-&gt;複製路徑 查看資料夾的路徑 若是使用R Project打開，除非需要更換路徑，不然預設就是R Project的資料夾 # 設定工作路徑 setwd(&quot;D:/Dropbox/R_for_NGO&quot;) # 顯示目前的工作路徑 getwd() 5.2 讀取資料 常見的Open Data儲存方式包括 表格式檔案（包含 CSV 資料(.csv)、Excel 試算表(.xlsx)、spss(.sav)、stata(.dta)、SAS(.sas7bdat)） 非表格式檔案（包含 TXT 資料、JSON 資料、XML資料） 但大多數的公開資料都可以直接下載CSV檔案，或是調查資料大多都有提供spss、stata或SAS的檔案格式，因此在此先介紹這個較簡單的方式， 另外其他透過網路爬蟲、API或JSON與XML格式的資料，暫不多做介紹，有興趣者可以到以下連結查看參考1、參考2、參考3 5.2.1 Import Dataset功能 (RStudio) 若是檔案為可直接下載(表格式檔案式)，包括文字檔、其他軟體的檔案格式， 在RStudio當中有提供直接點選讀取資料的功能，包括純文字.txt、.cvs、或Excel試算表.xslx、spss、SAS、Stata的檔案格式 下圖以讀取R_practice_new的.cvs檔案為範例， 1. 點選Import Dataset -&gt; From Text(readr)... 點選Import Dataset -&gt; From Text(readr)... 2.出現視窗後點選左上角Browse，點選要輸入的檔案 出現視窗後點選左上角Browse，點選要輸入的檔案 之後空白處會載入部分資料提供預覽，可以根據需求更改參數(左下角) 之後空白處會載入部分資料提供預覽，可以根據需求更改參數(左下角) 右下角也有提供程式碼，且就是根據你點選的方式呈現，可以點選完後複製程式碼(右下有個類似紙的圖案)，這樣就可以留下讀檔案的紀錄 右下角也有提供程式碼，且就是根據你點選的方式呈現，可以點選完後複製程式碼 複製的程式 # 讀取R_practice_new的.cvs檔案 library(readr) R_practice_new &lt;- read_csv(&quot;data/R_practice_new.csv&quot;) View(R_practice_new) 讀取檔案後會出現在Global Environment中 讀取檔案後會出現在Global Environment中 也可以點開瀏覽檔案 點開瀏覽檔案 另外若是要讀取R_practice_new的.dta檔案，可是可以用類似上述點選的方式讀取， # 讀取R_practice_new的.dta檔案 library(haven) R_practice_new &lt;- read_dta(&quot;data/R_practice_new.dta&quot;) View(R_practice_new) 5.3 匯出資料 在R處理完檔案後，通常會將資料匯出成其他另外檔案提供其他人使用，較常匯出使用的檔案格式tab分隔的文字檔.txt或是逗號分隔的文字檔.csv，有一些格式上的呈現可以另外再進行參數設定，這邊只會介紹簡單的匯出形式，若要調整可參考該函數的help文件 5.3.1 R物件.rds 若是處理到一半，之後還要繼續用R處理，可以先匯出成R物件檔案.rds，較方便自己下次處理，後續最後處理完成再轉換成其他常見檔案 # 取得R內建資料 data(iris) saveRDS(iris, &quot;iris.rds&quot;) ## 前面是data名稱、後面是要存的檔案名稱 5.3.2 文字檔.txt # 查詢write.table的help文件 ?write.table # 取得R內建資料 data(iris) # 匯出成.txt檔案 write.table(iris, file = &quot;iris.txt&quot;, sep = &quot;,&quot;, row.names = F, col.names = T) write.table的help文件，文件後面也有針對每個參數的描述 5.3.3 CSV檔.csv # 查詢write.csv的help文件 ?write.csv # 取得R內建資料 data(iris) write.csv(iris, file = &quot;iris.csv&quot;, row.names = F) 5.3.4 Excel 試算表.xslx 存成.xlsx需另外使用其他套件，在此使用的是writexl，但也有其他的套件也可以輸出成.xlsx(如openxlsx) # 載入writexl套件 library(writexl) # 查詢write_xlsx的help文件 ?write_xlsx # 取得R內建資料 data(iris) write_xlsx(list(iris = iris), &quot;iris.xlsx&quot;) 5.4 簡單資料合併 在上用資料時，可能遇到有有新資料需要整合在舊資料當中，這時我們就可以使用一些簡單的資料合併方法來整合資料， 舉例來說: 若是今天有一份蒐集好的簡單資料，但收回來時發現忘記問受訪者的性別，因此又再去補問一次，此時我們手上就會有兩份資料，一個是原先收集的資料，另一個是後來蒐集的性別資料，而這兩份資料都是相同的受訪者回答，因此我們就可以透過受訪者的id編號將性別資料橫向合併到原先資料中，也就是原先資料可能有100筆(100個受訪者)且只有問年齡、教育程度，合併後的資料多了性別的變項但仍是100筆(100個受訪者)，變項變多，但資料筆數不變。 另外一種狀況同樣有一份蒐集好的資料，但隔一年又收集了一份問了相同問題的資料，但這兩份資料的受訪者不一樣，此時我們可以利用相同的問題，將兩份資料垂直的合併，也就是原先資料可能只有100筆(100個受訪者)且有問年齡、教育程度，合併之後變成200筆(200個受訪者且還是只有問年齡、教育程度，變項不變，但資料筆數資加了。 另外還有一些情況像是excel中的vlookup等也可以用合併的概念在R語言中使用。 5.4.1 rbind()和cbind() 在資料當中有時需要新增整列或整行的資料， 可以使用rbind()和cbind()來完成(vector或是data.frame都適用) 若今天想在iris資料中加入新的一列(原先有150筆資料新增一筆) # vector rbind(c(1, 2, 3), ## 第一列 c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) ## 第二列 ) # 取得R內建資料 data(iris) names(iris) # 新增成另一個資料 iris_nrow &lt;- rbind(iris, ## 資料框 c(1, 2, 3, 4, &quot;setosa&quot;) ## 新增一列 ) ## or # 直接更換原先的資料 iris &lt;- rbind(iris, #資料框 c(1, 2, 3, 4, &quot;setosa&quot;) ## 新增一列 ) 若今天想在iris資料中加入新的一行(原先有四行) # vector cbind(c(1, 2, 3), ## 第一行 c(&quot;apple&quot;, &quot;banana&quot;, &quot;cat&quot;) ## 第二行 ) # 取得R內建資料 data(iris) names(iris) # 新增成另一個資料 iris_newcol &lt;- cbind(iris, ## 資料框 rep(&quot;newcol&quot;, nrow(iris)) ## 自行新增一行、或是有對應的資料可以直接新增 ) 5.4.2 用dplyr套件合併資料 在資料想以某個欄位為依據進行合併時(像是長期資料，想以個人id將兩波資料合併)， 可以使用R原先內建的merge或是用dplyr套件提供的相關指令 詳細可以查看參考1、參考2的整理 # 增加變數：使用R base的merge merge(data_frame1, data_frame2, by=&quot;idvar&quot;, all=TRUE) # 增加觀察值：使用dplyr的bind_rows() library(dplyr) bind_rows(data_frame1, data_frame2) 5.4.3 長寬資料轉換 在處理特殊資料或是一些特殊統計分析時，可能需要將資料做長寬轉換處理，tidyr套件中提供的兩個好用的函數pivot_longer()、pivot_wider()， 在此並不多作介紹，有興趣可以查看參考1、參考2 5.5 資料瀏覽 若已經將資料讀取到R裡面，一開始需要看一下或檢查資料的大致狀況如何 以R_practice_new.csv資料為例: 讀取R_practice_new的.cvs檔案(或用點選方式) library(readr) R_practice_new &lt;- read_csv(&quot;data/R_practice_new.csv&quot;) 5.5.1 資料屬性查詢函數 查看資料內容 View(R_practice_new) ## 查看資料 head(R_practice_new) ## 查看前6筆資料內容 ## # A tibble: 6 × 8 ## id sex age height weight area score fitness ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 75 1 18 167 49 中區 97 0 ## 2 55 1 22 161 55 南區 97 0 ## 3 50 1 22 167 66 南區 99 1 ## 4 104 1 22 166 66 南區 99 1 ## 5 37 1 24 168 61 中區 96 0 ## 6 16 2 24 172 52 中區 91 0 tail(R_practice_new) ## 查看後6筆資料內容 ## # A tibble: 6 × 8 ## id sex age height weight area score fitness ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 66 1 54 157 78 南區 48 0 ## 2 5 1 59 170 80 南區 41 1 ## 3 33 2 46 170 51 北區 NA 0 ## 4 23 1 32 163 57 南區 NA 0 ## 5 61 2 50 181 71 中區 NA 0 ## 6 13 1 28 170 72 中區 NA 1 查看資料各種名稱 names(R_practice_new) ## 顯示資料名稱 ## [1] &quot;id&quot; &quot;sex&quot; &quot;age&quot; &quot;height&quot; &quot;weight&quot; &quot;area&quot; &quot;score&quot; ## [8] &quot;fitness&quot; colnames(R_practice_new) ## 顯示欄位名稱 ## [1] &quot;id&quot; &quot;sex&quot; &quot;age&quot; &quot;height&quot; &quot;weight&quot; &quot;area&quot; &quot;score&quot; ## [8] &quot;fitness&quot; rownames(R_practice_new) ## 顯示列名稱(若沒有則顯示編號) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; &quot;10&quot; &quot;11&quot; &quot;12&quot; ## [13] &quot;13&quot; &quot;14&quot; &quot;15&quot; &quot;16&quot; &quot;17&quot; &quot;18&quot; &quot;19&quot; &quot;20&quot; &quot;21&quot; &quot;22&quot; &quot;23&quot; &quot;24&quot; ## [25] &quot;25&quot; &quot;26&quot; &quot;27&quot; &quot;28&quot; &quot;29&quot; &quot;30&quot; &quot;31&quot; &quot;32&quot; &quot;33&quot; &quot;34&quot; &quot;35&quot; &quot;36&quot; ## [37] &quot;37&quot; &quot;38&quot; &quot;39&quot; &quot;40&quot; &quot;41&quot; &quot;42&quot; &quot;43&quot; &quot;44&quot; &quot;45&quot; &quot;46&quot; &quot;47&quot; &quot;48&quot; ## [49] &quot;49&quot; &quot;50&quot; &quot;51&quot; &quot;52&quot; &quot;53&quot; &quot;54&quot; &quot;55&quot; &quot;56&quot; &quot;57&quot; &quot;58&quot; &quot;59&quot; &quot;60&quot; ## [61] &quot;61&quot; &quot;62&quot; &quot;63&quot; &quot;64&quot; &quot;65&quot; &quot;66&quot; &quot;67&quot; &quot;68&quot; &quot;69&quot; &quot;70&quot; &quot;71&quot; &quot;72&quot; ## [73] &quot;73&quot; &quot;74&quot; &quot;75&quot; &quot;76&quot; &quot;77&quot; &quot;78&quot; &quot;79&quot; &quot;80&quot; &quot;81&quot; &quot;82&quot; &quot;83&quot; &quot;84&quot; ## [85] &quot;85&quot; &quot;86&quot; &quot;87&quot; &quot;88&quot; &quot;89&quot; &quot;90&quot; &quot;91&quot; &quot;92&quot; &quot;93&quot; &quot;94&quot; &quot;95&quot; &quot;96&quot; ## [97] &quot;97&quot; &quot;98&quot; &quot;99&quot; &quot;100&quot; &quot;101&quot; &quot;102&quot; &quot;103&quot; &quot;104&quot; &quot;105&quot; &quot;106&quot; &quot;107&quot; &quot;108&quot; ## [109] &quot;109&quot; &quot;110&quot; dimnames(R_practice_new) ## 先顯示列再顯示欄位的名稱 ## [[1]] ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; &quot;10&quot; &quot;11&quot; &quot;12&quot; ## [13] &quot;13&quot; &quot;14&quot; &quot;15&quot; &quot;16&quot; &quot;17&quot; &quot;18&quot; &quot;19&quot; &quot;20&quot; &quot;21&quot; &quot;22&quot; &quot;23&quot; &quot;24&quot; ## [25] &quot;25&quot; &quot;26&quot; &quot;27&quot; &quot;28&quot; &quot;29&quot; &quot;30&quot; &quot;31&quot; &quot;32&quot; &quot;33&quot; &quot;34&quot; &quot;35&quot; &quot;36&quot; ## [37] &quot;37&quot; &quot;38&quot; &quot;39&quot; &quot;40&quot; &quot;41&quot; &quot;42&quot; &quot;43&quot; &quot;44&quot; &quot;45&quot; &quot;46&quot; &quot;47&quot; &quot;48&quot; ## [49] &quot;49&quot; &quot;50&quot; &quot;51&quot; &quot;52&quot; &quot;53&quot; &quot;54&quot; &quot;55&quot; &quot;56&quot; &quot;57&quot; &quot;58&quot; &quot;59&quot; &quot;60&quot; ## [61] &quot;61&quot; &quot;62&quot; &quot;63&quot; &quot;64&quot; &quot;65&quot; &quot;66&quot; &quot;67&quot; &quot;68&quot; &quot;69&quot; &quot;70&quot; &quot;71&quot; &quot;72&quot; ## [73] &quot;73&quot; &quot;74&quot; &quot;75&quot; &quot;76&quot; &quot;77&quot; &quot;78&quot; &quot;79&quot; &quot;80&quot; &quot;81&quot; &quot;82&quot; &quot;83&quot; &quot;84&quot; ## [85] &quot;85&quot; &quot;86&quot; &quot;87&quot; &quot;88&quot; &quot;89&quot; &quot;90&quot; &quot;91&quot; &quot;92&quot; &quot;93&quot; &quot;94&quot; &quot;95&quot; &quot;96&quot; ## [97] &quot;97&quot; &quot;98&quot; &quot;99&quot; &quot;100&quot; &quot;101&quot; &quot;102&quot; &quot;103&quot; &quot;104&quot; &quot;105&quot; &quot;106&quot; &quot;107&quot; &quot;108&quot; ## [109] &quot;109&quot; &quot;110&quot; ## ## [[2]] ## [1] &quot;id&quot; &quot;sex&quot; &quot;age&quot; &quot;height&quot; &quot;weight&quot; &quot;area&quot; &quot;score&quot; ## [8] &quot;fitness&quot; 查看資料長度 length(R_practice_new) ## 顯示資料查度(若為data.frame會顯示欄位數) ## [1] 8 dim(R_practice_new) ## 先顯示列再顯示欄位的長度 ## [1] 110 8 顯示資料的架構資訊 str(R_practice_new) ## spc_tbl_ [110 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ## $ id : num [1:110] 75 55 50 104 37 16 82 70 47 94 ... ## $ sex : num [1:110] 1 1 1 1 1 2 2 2 1 1 ... ## $ age : num [1:110] 18 22 22 22 24 24 26 24 26 27 ... ## $ height : num [1:110] 167 161 167 166 168 172 167 163 170 152 ... ## $ weight : num [1:110] 49 55 66 66 61 52 74 72 63 47 ... ## $ area : chr [1:110] &quot;中區&quot; &quot;南區&quot; &quot;南區&quot; &quot;南區&quot; ... ## $ score : num [1:110] 97 97 99 99 96 91 99 99 93 90 ... ## $ fitness: num [1:110] 0 0 1 1 0 0 1 1 0 1 ... ## - attr(*, &quot;spec&quot;)= ## .. cols( ## .. id = col_double(), ## .. sex = col_double(), ## .. age = col_double(), ## .. height = col_double(), ## .. weight = col_double(), ## .. area = col_character(), ## .. score = col_double(), ## .. fitness = col_double() ## .. ) ## - attr(*, &quot;problems&quot;)=&lt;externalptr&gt; class(R_practice_new$age) ## 數值資料 ## [1] &quot;numeric&quot; class(R_practice_new$area) ## 文字資料 ## [1] &quot;character&quot; 簡單查看資料分配 table(R_practice_new$sex) ## sex(性別)次數分配 ## ## 1 2 ## 57 53 table(R_practice_new$area) ## area(地區)次數分配 ## ## 中區 北區 東區 南區 ## 30 26 15 36 上述函數也可以合併使用 ## 顯示前6筆資料的area(地區)次數分配 table(head(R_practice_new)$area) ## ## 中區 南區 ## 3 3 5.5.2 資料排序 另外也可以對向量或資料進行排序 創建一個由數值組成的nosort向量 nosort &lt;- c(1, 6, 5, 8, 2, 3) 使用sort()函數，預設是由小排到大 sort(nosort) ## 預設是由小排到大 ## [1] 1 2 3 5 6 8 使用sort()函數，將decreasing設為T(TRUE)，代表由大排到小 sort(nosort, decreasing = T) ## 由大排到小 ## [1] 8 6 5 3 2 1 使用R_practice_new資料為範例: 讀取R_practice_new的.cvs檔案(或用點選方式) library(readr) R_practice_new &lt;- read_csv(&quot;data/R_practice_new.csv&quot;) View(R_practice_new) 顯示age(年齡)前6筆資料 head(R_practice_new$age) ## [1] 18 22 22 22 24 24 顯示age(年齡)排序之後的前6筆資料 sort(head(R_practice_new$age)) ## [1] 18 22 22 22 24 24 顯示age(年齡)排序之後前6筆資料的原始位置(由小到大) order(head(R_practice_new$age)) ## [1] 1 2 3 4 5 6 根據age(年齡)排序之後的前6筆資料的原始位置，來排序整個資料 R_practice_new[order(head(R_practice_new$age)), ] ## # A tibble: 6 × 8 ## id sex age height weight area score fitness ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 75 1 18 167 49 中區 97 0 ## 2 55 1 22 161 55 南區 97 0 ## 3 50 1 22 167 66 南區 99 1 ## 4 104 1 22 166 66 南區 99 1 ## 5 37 1 24 168 61 中區 96 0 ## 6 16 2 24 172 52 中區 91 0 5.5.3 用dplyr瀏覽 dplyr套件有許多函數可以更方便的瀏覽或操作data.frame資料，在此先介紹部分關於瀏覽相關功能，之後章節會進一步介紹處理資料功能， dplyr cheat sheet、參考1、參考2、參考3、參考4 select(): 可以選擇要分析的欄位(Column) filter(): 可以選擇要分析的觀察值(Row) arrange(): 用來排序觀察值 group_by(): 用來分組瀏覽 讀取R_practice_new的.cvs檔案(或用點選方式) library(readr) R_practice_new &lt;- read_csv(&quot;data/R_practice_new.csv&quot;) View(R_practice_new) 載入套件 library(tidyverse) ## 整合性的資料分析(包括dplyr) ## Warning: package &#39;ggplot2&#39; was built under R version 4.3.1 ## Warning: package &#39;dplyr&#39; was built under R version 4.3.1 ## OR library(dplyr) ## 也可以直接載入dplyr 若只想要查看前6筆資料值中，欄位 id、age(年齡),用select() 進行選擇 head(R_practice_new) %&gt;% select(id, age) ## # A tibble: 6 × 2 ## id age ## &lt;dbl&gt; &lt;dbl&gt; ## 1 75 18 ## 2 55 22 ## 3 50 22 ## 4 104 22 ## 5 37 24 ## 6 16 24 若只想要查看前6筆資料值中，weight(體重)大於等於60，用filter()進行篩選 head(R_practice_new) %&gt;% filter(weight &gt;= 60) ## # A tibble: 3 × 8 ## id sex age height weight area score fitness ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 50 1 22 167 66 南區 99 1 ## 2 104 1 22 166 66 南區 99 1 ## 3 37 1 24 168 61 中區 96 0 若想根據sex(性別)和age(年齡)排序(先排序sex再排age)來查看前6筆資料值，用arrange()進行排序 R_practice_new %&gt;% arrange(sex, age) ## # A tibble: 110 × 8 ## id sex age height weight area score fitness ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 75 1 18 167 49 中區 97 0 ## 2 55 1 22 161 55 南區 97 0 ## 3 50 1 22 167 66 南區 99 1 ## 4 104 1 22 166 66 南區 99 1 ## 5 37 1 24 168 61 中區 96 0 ## 6 47 1 26 170 63 北區 93 0 ## 7 94 1 27 152 47 北區 90 1 ## 8 13 1 28 170 72 中區 NA 1 ## 9 88 1 30 154 47 北區 89 1 ## 10 57 1 31 154 49 東區 90 1 ## # ℹ 100 more rows 若想根據sex(性別)進行分組來看男女性不同的age(年齡)平均，用group_by()進行分組統計，通常是與summarise()結合使用，來查看描述統計 R_practice_new %&gt;% group_by(sex) %&gt;% summarise(age_mean = mean(age)) ## # A tibble: 2 × 2 ## sex age_mean ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1 46.3 ## 2 2 48.0 5.5.4 其他 5.5.4.1 data.table data.table是data.frame資料格式的延伸，在處理或讀取資料上比data.frame還來的有效率，這部分進階的可以參考1 "],["應用篇_實作簡單資料處理.html", "Chapter 6 應用篇_實作簡單資料處理 6.1 前置準備 6.2 設定不合理值 6.3 新建/修改/轉換變項 6.4 遺漏值處理 6.5 其他處理 6.6 匯出資料", " Chapter 6 應用篇_實作簡單資料處理 接下來會使用「R_practice_row.csv」的檔案，來繼續示範資料的初步清理與整理， (R_practice_row.csv 是尚未清理的檔案，存在不合理值 R_practice_new.csv 是已經清理好的檔案) 以下為檔案簡略的變項描述 簡略的變項描述 6.1 前置準備 6.1.1 讀取需要使用套件 以下為資處常使用的套件: 大部分的資處會使用到一個整合性的套件tidyverse(上述連結點進去後，可以根據不同套件的連結查看套件的cheatsheet)，其功能非常強大，在此只會簡單介紹關於資處的部分內容， 在接續下面分析前請先library以下套件 library(readr) ## 讀取檔案 library(tidyverse) ## 大部分的資處工具 (包含dplyr套件) library(data.table) ## 高效能資處工具 library(DescTools) ## 初步描述統計 ## Warning: package &#39;DescTools&#39; was built under R version 4.3.1 library(sjmisc) ## 設置缺失值 library(sjlabelled) ## 上標籤用 接下來關於資料清理的部分，並不會特別單一仔細的講解，而是會使用簡單的實際例子來呈現，並適時補充一點額外的解釋，當然由於R語言的功能強大有很多套件，也持續在整合並強化，下面介紹的資料清理可能不會是唯一的方式，也不一定是最有效率方式，但仍可以稍微參考。 6.1.2 設定工作路徑 setwd(&quot;D:/Dropbox/R_for_NGO&quot;) 6.1.3 讀取檔案 讀取R_practice_row的.cvs檔案(或用點選方式) R_practice_row &lt;- read_csv(&quot;data/R_practice_row.csv&quot;) names(R_practice_row) ## 查看變項名稱 ## [1] &quot;id&quot; &quot;sex&quot; &quot;age&quot; &quot;height&quot; &quot;weight&quot; &quot;area&quot; &quot;score&quot; ## [8] &quot;fitness&quot; 6.1.4 選取需要的變項到「新」的資料檔中 在此因為都要分析，但為了示範，因此全部都列上去，複製到新的資料檔是為了不更改最初的資料。 R_practice_row1 &lt;- R_practice_row[c(&quot;id&quot;, &quot;sex&quot;, &quot;age&quot;, &quot;height&quot;, &quot;weight&quot;, &quot;area&quot;, &quot;score&quot;, &quot;fitness&quot;)] 6.1.5 瀏覽資料 查看變項初步分配，來檢查是否有不合理值或缺失值 (以下指令都還有各自呈現的細節可以調整，可自行查看該指令的help) 若是我們想查看資料當中性別(sex)的資訊，需要先將此變項從資料裡取出， 可以使用前面講義所教方法，用「$」選取，將有關性別欄位的每個數值取出 R_practice_row1$sex ## [1] 1 2 1 2 1 2 1 1 2 1 2 2 1 2 1 2 1 2 1 2 1 2 1 1 1 ## [26] 1 1 1 1 1 2 2 2 1 1 1 1 1 2 2 1 1 2 2 2 1 1 2 2 1 ## [51] 1 1 2 2 1 2 1 2 1 1 2 2 2 1 2 1 1 2 1 2 1 2 2 2 1 ## [76] 1 2 1 1 2 1 2 1 2 2 1 2 1 2 2 22 2 1 1 1 1 2 1 2 2 ## [101] 2 2 2 1 1 2 2 2 1 1 使用table()函數初步查看次數分配(以sex性別為例) (useNA 是設定列出是否有NA) table(R_practice_row1$sex, useNA = &quot;always&quot;) ## 呈現簡單次數分配 ## ## 1 2 22 &lt;NA&gt; ## 57 52 1 0 使用frq()函數呈現更多內容的次數分配表與簡單描述統計 frq(R_practice_row1$sex) ## x &lt;numeric&gt; ## # total N=110 valid N=110 mean=1.66 sd=2.02 ## ## Value | N | Raw % | Valid % | Cum. % ## ------------------------------------- ## 1 | 57 | 51.82 | 51.82 | 51.82 ## 2 | 52 | 47.27 | 47.27 | 99.09 ## 22 | 1 | 0.91 | 0.91 | 100.00 ## &lt;NA&gt; | 0 | 0.00 | &lt;NA&gt; | &lt;NA&gt; 上述結果我們可以得知，選1(女生)的總共有57人，佔51.82%、選2(男生)的總共有52人，佔47.27%，顯示這份資料女生稍微點一點，但另外可以看到，還有一個「22」的值，回去看一開始的變項描述也沒有出現這個值，因此可以判斷「22」很有可能是不合理的值，不應該出現在性別的變項當中，下一步則是要來處理這個不合理值。 我們可以看到，瀏覽資料的其中一個重要的目的，就是查看資料是否有不合理的地方。 6.2 設定不合理值 資料可能會有一些不合理的值，或是像上述「性別變項中回答22」，在分析上會當作遺漏值處理 R語言的遺漏值是以NA表示，但可以進一部細分成數值型的遺漏值NA_integer_或是字串型的遺漏值NA_character_ 以下僅列出部分方式，但同樣也有其他套件可以做到相同的設定遺漏值 目標是按照瀏覽檔案的覺得是不合理的值，將這些值的都當NA處理，並回傳到新的data frameR_practice_row2 R_practice_row2 &lt;- R_practice_row1 %&gt;% ## %&gt;% : pipe 將WVS_w7_n1(資料)用於mutate()函數中 mutate( ## 使用dplyr套件中的 mutate()代表創建/修改變項 # 第一種設定遺漏值方式(用if_else) sex = if_else(sex == 22 , ## 當sex的值不是1或不是2， NA_integer_, ## 設定為遺漏(NA_integer_)， sex), ## 其他回傳原本的值 # 第二種設定遺漏值方式(用set_na) weight = set_na(weight, na = -65), ## 設定weight當中-65為NA score = set_na(score, na = c(101:800)) ## 設定score當中101-800為NA ) 6.3 新建/修改/轉換變項 接著我們可以對變項進行一些修改， 以下僅列出部分方式，但同樣也有其他套件可以做到相同的資料清理 性別 = sex 原先: 1 = 女 2 = 男 修改成: 0 = 男 1 = 女 轉成類別變項(factor)並命名為female %&gt;%: 管道控制(pipe)，將R_practice_row2(資料)連結到mutate()函數 mutate(): dplyr套件中的mutate()代表創建/修改變項 case_match: 將變項值重新編碼 transform: 轉換資料型態 factor: 將資料型態轉變成類別變項(factor) R_practice_row3 &lt;- R_practice_row2 %&gt;% ## %&gt;% : pipe 將R_practice_row2(資料)連結到mutate()函數 mutate( # 性別 female = case_match( ## case_match 將變項值重新編碼 sex, 1 ~ 1, 2 ~ 0, ## 原先1變成1、2變成0 .default = NA ## 其他沒定義到的設定成NA(也設定成返回原先a01的值) ) )%&gt;% ## 可以根據上面mutate好的變項再連結到下面transform函數 transform( ## 轉換資料型態 female = factor( ## 將前面重新編碼的female變成類別變項(factor) female, levels = c(0, 1), ## 設定類別的順序 labels = c(&quot;男&quot;, &quot;女&quot;) ## 設定類別的標籤 ) ) 居住地區 = area 原先: 文字變項 修改成數值變項: 1 = 北區、2 = 中區、3 = 南區、4 = 東區，並轉成類別變項(factor)並命名為area_g4 R_practice_row3 &lt;- R_practice_row3 %&gt;% ## %&gt;% : pipe 將R_practice_row2(資料)連結到mutate()函數 mutate( # 居住地區 area_g4 = ifelse(area == &quot;北區&quot;, 1, ifelse(area == &quot;中區&quot;, 2, ifelse(area == &quot;南區&quot;, 3, ifelse(area == &quot;東區&quot;, 4, NA)))) )%&gt;% ## 可以根據上面mutate好的變項再連結到下面transform函數 transform( ## 轉換資料型態 area_g4 = factor( ## 將前面重新編碼的female變成類別變項(factor) area_g4, levels = c(1, 2, 3, 4), ## 設定類別的順序 labels = c(&quot;北區&quot;, &quot;中區&quot;, &quot;南區&quot;, &quot;東區&quot;) ## 設定類別的標籤 ) ) bmi = bmi bmi計算方式: 體重(公斤)/身高平方(公尺平方) 根據bmi計算公式建立新變項bmi R_practice_row3 &lt;- R_practice_row3 %&gt;% ## %&gt;% : pipe 將R_practice_row2(資料)連結到mutate()函數 mutate( # bmi bmi = weight/((height/100)^2) ) 塑身意願 = fitness 原先是數值變項，轉成類別變項(factor) R_practice_row3 &lt;- R_practice_row3 %&gt;% ## %&gt;% : pipe 將R_practice_row2(資料)連結到mutate()函數 transform( # 塑身意願 fitness = factor( fitness, levels = c(0, 1) ) ) 將不需要的欄位刪除 R_practice_row4 &lt;- subset(R_practice_row3, select = c(-sex, -area, -height, -weight)) 6.3.1 將資料上標籤 另外除了剛剛factor有上值標籤(labels)，其實也有其他套件可以幫助數值變項上標籤，可以在呈現時更容易了解 可以先查看次數分配，此時fitness(塑身意願)是沒有值標籤的 frq(R_practice_row4$fitness) ## x &lt;categorical&gt; ## # total N=110 valid N=110 mean=0.37 sd=0.49 ## ## Value | N | Raw % | Valid % | Cum. % ## ------------------------------------- ## 0 | 69 | 62.73 | 62.73 | 62.73 ## 1 | 41 | 37.27 | 37.27 | 100.00 ## &lt;NA&gt; | 0 | 0.00 | &lt;NA&gt; | &lt;NA&gt; 使用set_label()函數，貼上變項標籤variable labels R_practice_row4 &lt;- R_practice_row4 %&gt;% mutate( female = set_label(female, label = &quot;性別&quot;), age = set_label(age, label = &quot;年齡&quot;), area_g4 = set_label(area_g4, label = &quot;居住地區&quot;), fitness = set_label(fitness, label = &quot;塑身意願&quot;), ) 使用set_labels()函數，貼上變項值標籤value labels R_practice_row4 &lt;- R_practice_row4 %&gt;% mutate( fitness = set_labels(fitness, labels = c(&quot;沒意願&quot; = 0, &quot;有意願&quot; = 1)), ) 再次查看次數分配可以看到有值標籤了 frq(R_practice_row4$fitness) ## 塑身意願 (x) &lt;categorical&gt; ## # total N=110 valid N=110 mean=0.37 sd=0.49 ## ## Value | Label | N | Raw % | Valid % | Cum. % ## ---------------------------------------------- ## 0 | 沒意願 | 69 | 62.73 | 62.73 | 62.73 ## 1 | 有意願 | 41 | 37.27 | 37.27 | 100.00 ## &lt;NA&gt; | &lt;NA&gt; | 0 | 0.00 | &lt;NA&gt; | &lt;NA&gt; 6.4 遺漏值處理 若將需要分析的變項都清理、創建/修改整理好後，不同的變項可能有不同數量的遺漏值，在此這些缺失值可能就會導致在分析上樣本數的差距 對於這些缺失值有很多種處理方式，在此只會介紹其中一種 以下將所有有缺失的資料在分析時用complete.cases一併排除 查看遺漏值 is.na(): 遺漏值的位置會顯示成TRUE is.na(R_practice_row4$female) ## 遺漏值的位置會顯示成sum(is.na()): 計算遺漏值的數量 sum(is.na(R_practice_row4$female)) ## [1] 1 排除遺漏值 complete.cases: 將有遺漏的觀察值直接刪除 R_use_analysis &lt;- R_practice_row4[complete.cases(R_practice_row4), ] 6.5 其他處理 除了上述所說的清理方式，實務上可能還會碰到其他類型需要較複雜處理的資料，以及其他方式的清理，以下列出兩個常見處理的資料型態，有需要者可再進一步查看，當然也有蠻多部分可能是講義所沒有列出，若有碰到再自行上網查找相關方法 6.5.1 字串處理 除了上述簡單介紹的對於「數值」資料的處理，另外也有針對「字串」資料的處理， 但這部分較複雜，有興趣者至以下連結參考，參考1、參考2、參考3 6.5.2 時間資料處理 有時資料也會包括時間形式的數據，而lubridate就是專門處理時間數據的套件，有興趣者有可以自行參考 6.6 匯出資料 最後我們需要將資料輸出以便後續分析或保存，前一章節有介紹過如何輸出資料 在此，當我們資料清理好後，可能之後還需要做進一步的分析，但若並不是在同一時間來做或需換個檔案來寫分析時，可以將處理好的檔案先暫時存成.rds檔案，以便之後繼續在R語言使用 若整理好也可以存成其他格式 # 存成.rds檔 saveRDS(R_use_analysis, &quot;data/R_use_analysis&quot;) "],["應用篇_探索性資料分析.html", "Chapter 7 應用篇_探索性資料分析 7.1 資料視覺化簡略介紹 ggplot2 7.2 簡單呈現探索式資料分析", " Chapter 7 應用篇_探索性資料分析 所謂探索式資料分析(Exploratory data analysis, EDA)，是在做統計分析前，利用資料本身的特性、分布等，進行描述、簡單統計、以及視覺化呈現，目的是為了更了解資料，可以觀察初步發現並排除資料有可能的錯誤，接下來再進一步用進階統計做分析(以下部分內容參考1、參考2講義) 而探索式資料分析主要可以分成兩方面: 1.對於單變項/雙變項的初步描述統計、交叉表或相關 2.對整體資料或上述的簡單統計進行視覺化 7.0.1 前置準備 library(tidyverse) ## 大部分的資處工具(包含ggplot2套件) library(data.table) ## 高效能資處工具 library(DescTools) ## 初步描述統計 library(sjmisc) ## 設置缺失值 library(sjlabelled) ## 上標籤用 ## 讀取上一章節處理好的資料 R_use_analysis &lt;- readRDS(&quot;data/R_use_analysis&quot;) 7.1 資料視覺化簡略介紹 ggplot2 在進入探索性分析前，需要簡單介紹一下R語言當中資料視覺化的工具， R語言當中有內建的基本簡單作圖，但更加常用與更廣為推薦的是使用Hadley Wickamn所創建的ggplot2套件，而ggplot2套件功能的豐富，也是R語言相較於其他軟體資料視覺化的功能強大的地方， 但接下來只會先對於ggplot2套件做非常粗略的介紹，目的是為了可以簡單呈現接下來的探索性資料分析，進一步的美編或細節相關調整等複雜的內容則不會介紹， 有興趣者可以進一步查看ggplot2 cheat sheet、參考1、參考2、參考3、參考4 另外再更進階的部分也有像是ggplot2加上地圖、互動式的資料視覺化……等其他呈現方式 使用ggplot2作圖的一般步驟:參考3 準備好需要使用且清理好的資料 將資料輸入進ggplot()函數中，並設定相關使用變項所對應(aesthetics)的座標軸、顏色、形狀…… 再來選擇適合的圖形類型、使用geom_xxx()相關函數(xxx需輸入對應圖形，例如geom_point()表示散佈圖) 將ggplot()函數用+與geom_xxx()相關函數做連結，此時已經可以作圖 接著是設定一些細節部分，像是標籤、調整位置……等，依樣用+連結 當然上述只是簡單步驟，實務上還是有蠻多調整上的細節，ggplot2 cheat sheet，有更多調整的函數，其他也有各種樣式可供選擇 整體大致簡單結構 ggplot p &lt;- ggplot(data = 使用資料, mapping = aes( 维度 = 變項名稱, ## 像是想設定y軸為duty_child，y = duty_child 维度2 = 變項名稱2, ...) ggplot的結果 + geom_ + 其他設定 p + geom_圖形類型(...) + ## 使用哪種圖形、並做進階設定 scale_對應座標_顯示設定(...) + ## 座標相關設定 labs(...) ## 標籤相關設定 7.2 簡單呈現探索式資料分析 (下列接續的分析只是挑選變項來示範操作，可能兩者並沒有太多關係或意義) 在呈現探索式資料分析前，我們可以再一次整體瀏覽一下清理好的資料， 利用skimr套件可以整體查看分析資料各個變項的狀況(細節可再設定)， 輸出結果呈現三個表， 第一個整理出資料名稱、樣本數、變項數、以及幾個類別/數值變項 第二個整理出類別變項的資訊、包括遺漏值、樣本數、幾個類別與類別的資訊 female(性別)、area_g4(居住地區四類)、fitness(有無塑身意願) 第三個整理出數值變項的資訊、包括遺漏值、數值變項的初步描述資訊 age(年齡)、bmi、score library(skimr) ## skim(資料, 選擇要查看變項，沒有設定則是全部) skim(R_use_analysis,-id) |&gt; print() ## ── Data Summary ──────────────────────── ## Values ## Name R_use_analysis ## Number of rows 100 ## Number of columns 7 ## _______________________ ## Column type frequency: ## factor 3 ## numeric 3 ## ________________________ ## Group variables None ## ## ── Variable type: factor ─────────────────────────────────────────────────────── ## skim_variable n_missing complete_rate ordered n_unique ## 1 fitness 0 1 FALSE 2 ## 2 female 0 1 FALSE 2 ## 3 area_g4 0 1 FALSE 4 ## top_counts ## 1 0: 63, 1: 37 ## 2 女: 52, 男: 48 ## 3 南區: 35, 中區: 27, 北區: 25, 東區: 13 ## ## ── Variable type: numeric ────────────────────────────────────────────────────── ## skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 ## 1 age 0 1 47.2 12.0 18 39 50.5 57 65 ## 2 score 0 1 73.7 15.8 41 61 76 88 99 ## 3 bmi 0 1 23.9 3.58 17.2 21.3 24.0 26.2 35.1 ## hist ## 1 ▂▂▆▆▇ ## 2 ▃▆▅▇▇ ## 3 ▅▇▇▂▁ 7.2.1 單一類別變項 以性別(female)為例，呈現男女性的次數分配 查看次數分配 使用直接計算方式 R_use_analysis |&gt; count(female) |&gt; ## count 計算樣本數 mutate( female_pct = n / sum(n) ## 計算出百分比 ) ## female n female_pct ## 1 男 48 0.48 ## 2 女 52 0.52 使用table()函數 table(R_use_analysis[[&quot;female&quot;]]) ## ## 男 女 ## 48 52 table(R_use_analysis[[&quot;female&quot;]]) |&gt; prop.table() ## ## 男 女 ## 0.48 0.52 接著也可以用長條圖先來呈現(以下僅為簡單粗略呈現，若要美化則須再調整) 畫圖(長條圖)呈現男女分別樣本數 先建立一個次數分配表 d_female &lt;- R_use_analysis |&gt; count(female) |&gt; mutate( pct = n / sum(n) ## 計算百分比 ) 畫長條圖呈現男女分別次數 ggplot(d_female, aes(x = female, y = n)) + geom_col() ## geom_col()是長條圖 畫長條圖呈現男女分別百分比 ggplot(d_female, aes(x = female, y = pct)) + geom_col() + scale_y_continuous( name = &quot;Percent&quot;, labels = scales::percent) 可以看到男性的樣本為48筆、佔約48%，女性的樣本稍多一點為52筆、佔約52%。 7.2.2 單一數值變項 以bmi為例，呈現描述統計 描述統計 使用summary函數 summary(R_use_analysis[[&quot;bmi&quot;]]) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 17.21 21.32 24.01 23.94 26.16 35.11 若只想看平均數也可以直接指定mean R_use_analysis |&gt; summarize(mean = mean(bmi)) ## mean ## 1 23.93701 接著也可以用直方圖、折線圖或盒形圖先來呈現(以下僅為簡單粗略呈現，若要美化則須再調整) 直方圖呈現 ggplot(R_use_analysis, aes(x = bmi)) + geom_histogram() ## geom_histogram()是直方圖 折線圖呈現 ggplot(R_use_analysis, aes(x = bmi)) + geom_freqpoly(bins = 30) ## geom_histogram()是折線圖 盒形圖呈現 ggplot(R_use_analysis, aes(x = &quot;&quot;, y = bmi)) + geom_boxplot() + ## geom_boxplot()是折線圖 labs(x = &quot;&quot;) 可以看到平均bmi約落在23.94左右，最小為17.21、最大為35.11。 7.2.3 兩個類別變項 查看性別(female)與塑身意願(fitness)的分布，做成交叉表的方式呈現 交叉表 用計算方式 d_female &lt;- R_use_analysis |&gt; count(female, fitness) |&gt; group_by(female) |&gt; ## 以female做分組 mutate(pct = n / sum(n)) |&gt; ungroup() d_female ## # A tibble: 4 × 4 ## female fitness n pct ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; ## 1 男 0 32 0.667 ## 2 男 1 16 0.333 ## 3 女 0 31 0.596 ## 4 女 1 21 0.404 使用table()函數 with(R_use_analysis, table( female, fitness )) ## fitness ## female 0 1 ## 男 32 16 ## 女 31 21 使用CrossTable()函數 with(R_use_analysis, gmodels::CrossTable( female, fitness )) ## Registered S3 method overwritten by &#39;gdata&#39;: ## method from ## reorder.factor DescTools ## ## ## Cell Contents ## |-------------------------| ## | N | ## | Chi-square contribution | ## | N / Row Total | ## | N / Col Total | ## | N / Table Total | ## |-------------------------| ## ## ## Total Observations in Table: 100 ## ## ## | fitness ## female | 0 | 1 | Row Total | ## -------------|-----------|-----------|-----------| ## 男 | 32 | 16 | 48 | ## | 0.102 | 0.174 | | ## | 0.667 | 0.333 | 0.480 | ## | 0.508 | 0.432 | | ## | 0.320 | 0.160 | | ## -------------|-----------|-----------|-----------| ## 女 | 31 | 21 | 52 | ## | 0.095 | 0.161 | | ## | 0.596 | 0.404 | 0.520 | ## | 0.492 | 0.568 | | ## | 0.310 | 0.210 | | ## -------------|-----------|-----------|-----------| ## Column Total | 63 | 37 | 100 | ## | 0.630 | 0.370 | | ## -------------|-----------|-----------|-----------| ## ## 接著也可以用堆疊長條圖、並列長條圖先來呈現(以下僅為簡單粗略呈現，若要美化則須再調整) 並列長條圖 ggplot(d_female, aes( x = fitness, fill = female, y = pct)) + geom_col(position = &quot;dodge&quot;) ## &quot;dodge&quot; 指定堆疊並列 堆疊長條圖 ggplot(d_female, aes( x = fitness, fill = female, y = n)) + geom_col(position = &quot;stack&quot;) ## &quot;stack&quot; 指定堆疊 可以看到整體而言，男性平均有66.7%沒有塑身意願、33.3%有塑身意願，女性平均有59.6%沒有塑身意願、40.4%有塑身意願，女性相較於男性稍微有多一點的塑身意願。 7.2.4 兩個數值變項 查看年齡(age)和bmi的影響關係，計算兩者相關係數 使用cor()函數，呈現相關係數 R_use_analysis |&gt; summarize(cor = cor(age, bmi, use=&quot;complete.obs&quot;)) ## cor ## 1 0.2270768 兩者的相關係數約為0.23，算是低度正相關 接著也可以用散布圖、並加上預測線先來呈現(以下僅為簡單粗略呈現，若要美化則須再調整) 散布圖 ggplot(R_use_analysis, aes(x = age, y = bmi)) + geom_point() ## geom_point()是散布圖 加上預測線 ggplot(R_use_analysis, aes(x = age, y = bmi)) + geom_point() + geom_smooth(method = &quot;glm&quot;) 7.2.5 一個類別一個數值變項 查看不同性別(female)的bmi差異 分組描述統計 R_use_analysis |&gt; group_by(female) |&gt; ## 以female做分組 summarize(mean = mean(bmi)) ## # A tibble: 2 × 2 ## female mean ## &lt;fct&gt; &lt;dbl&gt; ## 1 男 25.6 ## 2 女 22.4 接著也可以用分組盒形圖、分組折線圖線先來呈現(以下僅為簡單粗略呈現，若要美化則須再調整) 分組盒形圖 ggplot(R_use_analysis, aes( x = female, y = bmi)) + geom_boxplot() 分組折線圖 ggplot(R_use_analysis, aes( x = bmi, color = female)) + geom_freqpoly() 可以看到男性的bmi平均為25.63，女性的bmi平均為22.37，男性的bmi略大於女性。 7.2.6 兩個數值變項用類別變項分組 查看不同性別(female)，如何影響對於年齡(age)對於bmi的影響 分組相關係數 R_use_analysis |&gt; group_by(female) |&gt; ## 以female做分組 summarize(cor = cor(age, bmi, use=&quot;complete.obs&quot;)) ## # A tibble: 2 × 2 ## female cor ## &lt;fct&gt; &lt;dbl&gt; ## 1 男 0.168 ## 2 女 0.302 接著也可以用按照性別分組呈現散布圖、並加上預測線先來呈現(以下僅為簡單粗略呈現，若要美化則須再調整) 分組散布圖 ggplot(R_use_analysis, aes(x = age, y = bmi)) + geom_point() + facet_wrap(~ female) ## 按照性別分組 加上預測線 ggplot(R_use_analysis, aes(x = age, y = bmi)) + geom_point() + geom_smooth(method = &quot;glm&quot;) + facet_wrap(~ female) ## 按照性別分組 可以看到不管性別為何，年齡和bmi之間的關係都是低度的正相關，但女性(0.30)的影響似乎比男性(0.16)來的大。 7.2.7 其他進階統計 前面章節呈現了初步探索性資料分析，讓我們可以簡單了解各個變項簡單的分布資訊，但若是要進一步去探討變項間的關係，可能還會需要做其他的統計檢定，這邊就涉及到了其他進階相關的統計知識與分析技巧，這份講義並不會特別提到，R語言在統計方法上也提供非常多相關套件，另外R語言也有提供資料探勘、機器學習…其他進階探索、處理與分析資料的相關的方法，如果有興趣者可以再去參考相關進階講義。 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
